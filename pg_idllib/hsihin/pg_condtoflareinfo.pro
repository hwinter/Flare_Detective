;+
; NAME:
;
;   pg_condtoflareinfo
;
; PURPOSE:
;
;   take a structure with conditions for flares and outputs a
;   structure with more info from the flare list etc... 
;
; CATEGORY:
;
;   RHESSI util
;
; CALLING SEQUENCE:
;
;   flareinfolist=pg_condtoflareinfo(condlist)
;
; INPUTS:
;
;   condlist: a list of conditions, as generated by pg_parse_conditionfile
;
; OPTIONAL INPUTS:
;
;
;
; KEYWORD PARAMETERS:
;
;
;
; OUTPUTS:
;
;  a list with the following tags
;
;     
;     ID_NUMBER       LONG  
;     START_TIME      DOUBLE 
;     END_TIME        DOUBLE 
;     PEAK_TIME       DOUBLE 
;     OBS_START       DOUBLE
;     OBS_END         DOUBLE
;     BCK_TIME        DOUBLE    Array[2]
;     GOES_CLASS: max goes flux between START & END_TIME
;     XPOS: x position of the flare from flare list
;     YPOS: y position of the flare from flare list
;     SPIN_PERIOD: RHESSI spin period at 1/2(START TIME + END TIME)
;     MIN_ATT: minimum attenuator state between START & END TIME
;     MAX_ATT: maximum attenuator state between START & END TIME
;
;     ? particles?
;    
;      
;
;
; OPTIONAL OUTPUTS:
;
;
;
; COMMON BLOCKS:
;
;
;
; SIDE EFFECTS:
;
;
;
; RESTRICTIONS:
;
;
;
; PROCEDURE:
;
;
;
; EXAMPLE:
;
;
; 
; AUTHOR:
; 
;   Paolo Grigis ( pgrigis@astro.phys.ethz.ch )
;
; MODIFICATION HISTORY:
;
;   12/15-JAN-2007 written PG
;
;-

;.comp pg_condtoflareinfo

FUNCTION pg_condtoflareinfo,condlist

 ;parse flare list between start & end date


hsi_read_all_flare_list, flist,time_range=[anytim(condlist.start_date),anytim(condlist.end_date)]

data=flist->getdata()

nflares=n_elements(data)

goesclass=dblarr(nflares)

;check GOES interval (if available)

FOR i=0,nflares-1 DO BEGIN

    ;get goes data
    pg_plotgoes,[data[i].start_time,data[i].end_time],channel=1,datagoes=d,timegoes=t,/noplot

    goesclass[i]=max(d)

    print,'FLARE '+strtrim(i,2)+' has GOES class '+togoes(goesclass[i])

ENDFOR


indokgoesclass=where(goesclass GE condlist.min_goes_flux AND $
                     goesclass LE condlist.max_goes_flux,countokgoes)

IF countokgoes GE 1 THEN BEGIN 

   ;all flares with GOES class in desired range

   oneflareinfo={id_number:-1L,start_time:0d,end_time:0d,peak_time:0d $
                ,obs_start:0d,obs_end:0d,bck_time:[0d,0d],goes_class:-1d $
                ,xpos:!Values.f_nan,ypos:!Values.f_nan,spin_period:-1. $
                ,min_att:-1,max_att:-1}

   flareinfo=replicate(oneflareinfo,countokgoes)

   flareinfo.id_number=data[indokgoesclass].id_number
   flareinfo.start_time=data[indokgoesclass].start_time
   flareinfo.end_time=data[indokgoesclass].end_time
   flareinfo.peak_time=data[indokgoesclass].peak_time
   flareinfo.bck_time=data[indokgoesclass].bck_time
   flareinfo.xpos=data[indokgoesclass].position[0]
   flareinfo.ypos=data[indokgoesclass].position[1]
   flareinfo.goes_class=goesclass[indokgoesclass]
;   flareinfo.=data[indokgoesclass].
;   flareinfo.=data[indokgoesclass].

   oso=obj_new('hsi_obs_summary')

   FOR i=0,countokgoes-1 DO BEGIN

      flareinfo[i].spin_period=rhessi_get_spin_period(flareinfo[i].peak_time, /default_on_failure)

      ;get min & max attenuator state

      oso->set,obs_time_interval=[flareinfo[i].start_time,flareinfo[i].end_time]
      flagdata_struct=oso->getdata(class_name='obs_summ_flag')
      flagdata=flagdata_struct.flags
      flaginfo=oso->get(class_name='obs_summ_flag')
      flagtimes=oso->getdata(class_name='obs_summ_flag',/time)

      flag_attenuator_state=14
      att_state=flagdata[flag_attenuator_state,*]

      flareinfo[i].min_att=min(att_state)
      flareinfo[i].max_att=max(att_state)

      ;get obs_start and obs_end?
 
      oso->set,obs_time_interval=[flareinfo[i].start_time-4000,flareinfo[i].end_time+4000]
      flagdata_struct=oso->getdata(class_name='obs_summ_flag')
      flagdata=flagdata_struct.flags
      flaginfo=oso->get(class_name='obs_summ_flag')
      flagtimes=oso->getdata(class_name='obs_summ_flag',/time)

      dummy=min(abs(flagtimes-flareinfo[i].start_time),startimeindex)
      dummy=min(abs(flagtimes-flareinfo[i].end_time),endtimeindex)

      startimeindex=startimeindex+2
      endtimeindex=endtimeindex-2

      hsi_eclipse=1
      sunlight=flagdata[hsi_eclipse,*]
      slflag=1-sunlight;reform(fix(sunlight GE 99))

      sunrise=where((shift(slflag,-1)-slflag) EQ 1,countsunrise)
      sunset=where((shift(slflag,-1)-slflag) EQ -1,countsunset)
         
      IF countsunrise GE 1 THEN BEGIN 
         availablesunrise=where(sunrise LE startimeindex,count)

         IF count GE 1 THEN BEGIN           

            sunrise=sunrise[availablesunrise]
            flareinfo[i].obs_start=flagtimes[max(sunrise)]

         ENDIF

      ENDIF

      IF countsunset GE 1 THEN BEGIN 
         availablesunset=where(sunset GE endtimeindex,count)

         IF count GE 1 THEN BEGIN           

            sunset=sunset[availablesunset]
            flareinfo[i].obs_end=flagtimes[min(sunset)]

         ENDIF

      ENDIF



   ENDFOR

   
ENDIF

 

return,flareinfo


;check flags, poistions, orbits, spin period


;put all together


;
;hsi_read_all_flare_list, flist
;
;data=flist->getdata()
;
;utplot,data.peak_time-data[0].peak_time,findgen(n_elements(data)),data[0].peak_time
;pg_plot_histo,data.peak_time-data[0].peak_time,min=0,max=data[n_elements(data)-1].peak_time-data[0].peak_time,nbins=5,/xstyle

END
