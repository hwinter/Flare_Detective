;+
; NAME:
;
;   pg_condtoflareinfo
;
; PURPOSE:
;
;   take a structure with conditions for flares and outputs a
;   structure with more info from the flare list etc... 
;
; CATEGORY:
;
;   RHESSI util
;
; CALLING SEQUENCE:
;
;   flareinfolist=pg_condtoflareinfo(condlist)
;
; INPUTS:
;
;   condlist: a list of conditions, as generated by pg_parse_conditionfile
;
; OPTIONAL INPUTS:
;
;
;
; KEYWORD PARAMETERS:
;
;
;
; OUTPUTS:
;
;  a list with the following tags
;
;     
;     ID_NUMBER       LONG  
;     START_TIME      DOUBLE 
;     END_TIME        DOUBLE 
;     PEAK_TIME       DOUBLE 
;     OBS_START       DOUBLE
;     OBS_END         DOUBLE
;     BCK_TIME        DOUBLE    Array[2]
;     GOES_CLASS: max goes flux between START & END_TIME
;     XPOS: x position of the flare from flare list
;     YPOS: y position of the flare from flare list
;     SPIN_PERIOD: RHESSI spin period at 1/2(START TIME + END TIME)
;     MIN_ATT: minimum attenuator state between START & END TIME
;     MAX_ATT: maximum attenuator state between START & END TIME
;
;     ? particles?
;    
;      
;
;
; OPTIONAL OUTPUTS:
;
;
;
; COMMON BLOCKS:
;
;
;
; SIDE EFFECTS:
;
;
;
; RESTRICTIONS:
;
;
;
; PROCEDURE:
;
;
;
; EXAMPLE:
;
;
; 
; AUTHOR:
; 
;   Paolo Grigis ( pgrigis@astro.phys.ethz.ch )
;
; MODIFICATION HISTORY:
;
;   12-JAN-2007 written PG
;
;-

;.comp pg_condtoflareinfo

function pg_condtoflareinfo,condlist

 ;parse flare list between start & end date


hsi_read_all_flare_list, flist,time_range=[anytim(condlist.start_date),anytim(condlist.end_date)]

data=flist->getdata()

nflares=n_elements(data)

goesclass=dblarr(nflares)

;check GOES interval (if available)

for i=0,nflares-1 do begin

    ;get goes data
    pg_plotgoes,[data[i].start_time,data[i].end_time],channel=1,datagoes=d,timegoes=t,/noplot

    goesclass[i]=max(d)

    print,'FLARE '+strtrim(i,2)+' has GOES class '+togoes(goesclass[i])

endfor


;check flags, poistions, orbits, spin period


;put all together


;
;hsi_read_all_flare_list, flist
;
;data=flist->getdata()
;
;utplot,data.peak_time-data[0].peak_time,findgen(n_elements(data)),data[0].peak_time
;pg_plot_histo,data.peak_time-data[0].peak_time,min=0,max=data[n_elements(data)-1].peak_time-data[0].peak_time,nbins=5,/xstyle

end
