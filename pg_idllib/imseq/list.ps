%!PS-Adobe-3.0
%%Title: imseq_manip.pro
%%For: Paolo_Grigis
%%Creator: a2ps version 4.13
%%CreationDate: Wed Apr  9 12:13:11 2003
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: a4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(;+) p n
(;) N
(; ) S
(NAME) K
(:) p n
(;        imseq_manip) N
(;) N
(; PURPOSE: ) N
(;        widget interface for image sequence manipolation) N
(;) N
(; CALLING SEQUENCE:) N
(;) N
(;        imseq_manip,ptrimseq) N
(;) N
(; INPUTS:) N
(;) N
(;        ptrimseq: a pointer to an image sequence) N
(;) N
(; OUTPUT:) N
(;        ) N
(;) N
(; VERSION:) N
(;) N
(;       APR-2003 written) N
(;) N
(;) N
(; AUTHOR) N
(;       Paolo Grigis, Institute for Astronomy, ETH, Zurich) N
(;-) N
() N
() N
(;.comp ~/rapp_idl/imseq/imseq_manip.pro) N
(;) N
(;imseq_manip,ptr) N
(;) N
() N
() N
(PRO imseq_manip_plotbox,newcoor,oldcoor,sides=sides,noerase=noerase $) N
(                       ,nodraw=nodraw) N
() N
(;) N
(;This procedure draws and/) S
(or) K
( erase a rectangular frame on the current) p n
(;graphic window) N
(;) N
() N
(color=255B) N
(lines=ptrarr\(4\)) N
() N
(xoldmin=min\(oldcoor[0:1]\)) N
(xmin=min\(newcoor[0:1]\)) N
(xoldmax=max\(oldcoor[0:1]\)) N
(xmax=max\(newcoor[0:1]\)) N
(yoldmin=min\(oldcoor[2:3]\)) N
(ymin=min\(newcoor[2:3]\)) N
(yoldmax=max\(oldcoor[2:3]\)) N
(ymax=max\(newcoor[2:3]\)) N
() N
(IF ) S
(NOT) K
( keyword_set\(noerase\) THEN BEGIN) p n
() N
(    tv,*sides[0],xoldmin,yoldmin,/) S
(true) K n
(    tv,*sides[1],xoldmax,yoldmin,/) p
(true) K n
(    tv,*sides[2],xoldmin,yoldmin,/) p
(true) K n
(    tv,*sides[3],xoldmin,yoldmax ,/) p
(true) K
(   ) p n
() N
(imseq_manip.pro) (Page 1/7) (Apr 09, 03 12:10) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(ENDIF) p n
(IF ) S
(NOT) K
( keyword_set\(nodraw\) THEN BEGIN) p n
() N
(    sides[0]=ptr_new\(tvrd\(xmin,ymin,xmax-xmin+1,1,/) S
(true) K
(\)\)) p n
(    sides[1]=ptr_new\(tvrd\(xmax,ymin,1,ymax-ymin+1,/) S
(true) K
(\)\)) p n
(    sides[2]=ptr_new\(tvrd\(xmin,ymin,1,ymax-ymin+1,/) S
(true) K
(\)\)) p n
(    sides[3]=ptr_new\(tvrd\(xmin,ymax,xmax-xmin+1,1,/) S
(true) K
(\)\)) p n
() N
() N
(    lines[0]=ptr_new\(reform\(make_array\(3,xmax-xmin+1,1,/byte,value=color\) $) N
(                           ,3,xmax-xmin+1,1\)\)) N
(    lines[1]=ptr_new\(reform\(make_array\(3,1,ymax-ymin+1,/byte,value=color\) $) N
(                           ,3,1,ymax-ymin+1\)\)) N
(    lines[2]=ptr_new\(reform\(make_array\(3,1,ymax-ymin+1,/byte,value=color\) $) N
(                           ,3,1,ymax-ymin+1\)\)) N
(    lines[3]=ptr_new\(reform\(make_array\(3,xmax-xmin+1,1,/byte,value=color\) $) N
(                           ,3,xmax-xmin+1,1\)\)) N
() N
(    tv,*lines[0],xmin,ymin,/) S
(true) K n
(    tv,*lines[1],xmax,ymin,/) p
(true) K n
(    tv,*lines[2],xmin,ymin,/) p
(true) K n
(    tv,*lines[3],xmin,ymax,/) p
(true) K n
() p n
(ENDIF) N
() N
(END) N
() N
() N
(FUNCTION imseq_manip_outtext,mapstr) N
() N
(;) N
(;Returns the text to display as information in the text widget) N
(;) N
() N
(startime=anytim\(\(*\(mapstr.imseq[mapstr.minfr]\)\).) S
(time) K
(,/vms\)) p n
(endtime =anytim\(\(*\(mapstr.imseq[mapstr.maxfr]\)\).) S
(time) K
(,/vms\)) p n
() N
(outtext=[') S
(Start at frame ) str
('+strtrim\(mapstr.minfr,2\),startime,'' $) p n
(        ,') S
(End at frame ) str
('+strtrim\(mapstr.maxfr,2\),endtime,'' $) p n
(        ,') S
(Coordinate selection) str
(' $) p n
(        ,') S
(\() str
('+strtrim\(string\(mapstr.selcoor[0]\),2\)+') p
(,) str
(' $) p n
(            +strtrim\(string\(mapstr.selcoor[2]\),2\)+') S
(\)) str
(' $) p n
(        ,') S
(\() str
('+strtrim\(string\(mapstr.selcoor[1]\),2\)+') p
(,) str
(' $) p n
(            +strtrim\(string\(mapstr.selcoor[3]\),2\)+') S
(\)) str
(' ]) p n
() N
(RETURN,outtext) N
() N
(END) N
() N
() N
(PRO imseq_manip_event,ev) N
() N
(;) N
(;Event handler) N
(;) N
() N
(widget_control,ev.handler,get_uvalue=mapstr) N
() N
() N
(CASE ev.ID OF ) N
(    ) N
(    widget_info\(ev.top,find_by_uname=') S
(selectim) str
('\) : BEGIN) p n
(imseq_manip.pro) (Page 2/7) (Apr 09, 03 12:10) title
border
grestore
(Printed by Paolo_Grigis) rhead
(imseq_manip.pro) (1/4) (Wednesday April 09, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    mapstr.selim=ev.index) N
(    widget_control,ev.handler,set_uvalue=mapstr) N
() N
(    winnum=widget_info\(ev.top,find_by_uname=') S
(drawwin) str
('\)) p n
(    widget_control,winnum,get_value=winnum2) N
(    plot_map,*\(mapstr.imseq[mapstr.selim]\),window=winnum2) N
(    END) N
() N
() N
(    widget_info\(ev.top,find_by_uname=') S
(selectmin) str
('\) : BEGIN) p n
() N
(        IF ev.index NE mapstr.minfr THEN BEGIN) N
(            mapstr.totmap=ptr_new\(\)) N
(            mapstr.minfr=ev.index) N
() N
(            textwindow=widget_info\(ev.top,find_by_uname=') S
(frameinfo) str
('\)) p n
(            widget_control,textwindow,set_value=imseq_manip_outtext\(mapstr\)) N
() N
(            widget_control,ev.handler,set_uvalue=mapstr) N
(            ) N
(        ENDIF) N
(    END) N
() N
(    widget_info\(ev.top,find_by_uname=') S
(selectmax) str
('\) : BEGIN) p n
() N
(        IF ev.index NE mapstr.maxfr THEN BEGIN) N
(            mapstr.totmap=ptr_new\(\)) N
(            mapstr.maxfr=ev.index) N
() N
(            textwindow=widget_info\(ev.top,find_by_uname=') S
(frameinfo) str
('\)) p n
(            widget_control,textwindow,set_value=imseq_manip_outtext\(mapstr\)) N
(  ) N
(            widget_control,ev.handler,set_uvalue=mapstr) N
(        ENDIF) N
(    END     ) N
( ) N
(    widget_info\(ev.top,find_by_uname=') S
(commands) str
('\) : BEGIN) p n
() N
(        CASE ev.value OF) N
() N
(            0 : BEGIN ;Draw total Image) N
() N
(                IF mapstr.totmap EQ ptr_new\(\) THEN BEGIN) N
(                    mapstr.totmap=ptr_new\(summaps\(mapstr.imseq $) N
(                                  ,min=mapstr.minfr,max=mapstr.maxfr\)\)) N
(                ENDIF) N
() N
(                widget_control,ev.handler,set_uvalue=mapstr) N
(                winnum=widget_info\(ev.top,find_by_uname=') S
(drawwin) str
('\)) p n
(                widget_control,winnum,get_value=winnum2) N
(                plot_map,*\(mapstr.totmap\),window=winnum2 $) N
(                        ,contour=mapstr.contour,limb=mapstr.limb) N
(            END) N
() N
(            1 : BEGIN ;Draw selected Image) N
() N
(                winnum=widget_info\(ev.top,find_by_uname=') S
(drawwin) str
('\)) p n
(                widget_control,winnum,get_value=winnum2) N
(                plot_map,*\(mapstr.imseq[mapstr.selim]\),window=winnum2 $) N
(                        ,contour=mapstr.contour,limb=mapstr.limb) N
(            END) N
(imseq_manip.pro) (Page 3/7) (Apr 09, 03 12:10) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(            2 : BEGIN ;Contour plot) N
(       ) N
(                mapstr.contour=1-mapstr.contour) N
(                widget_control,ev.handler,set_uvalue=mapstr) N
(            END) N
() N
(            3 : BEGIN ;Limb) N
() N
(                mapstr.limb=1-mapstr.limb) N
(                widget_control,ev.handler,set_uvalue=mapstr) N
(            END) N
() N
(            4 : BEGIN ;Select region) N
() N
(                draw=widget_info\(ev.top,find_by_uname=') S
(drawwin) str
('\)) p n
() N
(                status={dragging:0,first:0,last:0,oldcoor:[0,0,0,0] $) N
(                       ,boxcoor:[0,0,0,0],sides:ptrarr\(4\),maxx:0,maxy:0 $) N
(                       ,outcoor:[0,0,0,0]}) N
() N
(                geom=widget_info\(draw,/geometry\)) N
(                status.maxx=geom.draw_xsize-1) N
(                status.maxy=geom.draw_ysize-1) N
() N
(                widget_control,draw,set_uvalue=status) N
() N
(                ;makes the widget sensitive to mouse input events) N
(                widget_control,draw,/draw_button_events) N
(                widget_control,draw,/draw_motion_events) N
() N
() N
(                widget_control,draw,get_value=winnum2) N
(                wset,winnum2) N
(               ) N
(            END) N
() N
() N
(            5 : BEGIN ; ') S
(Done) str
(') p n
() N
(                widget_control,ev.top,/destroy) N
(            END) N
() N
(            ELSE : RETURN) N
() N
(        ENDCASE) N
() N
(    END) N
( ) N
(    widget_info\(ev.top,find_by_uname=') S
(drawwin) str
('\) : BEGIN) p n
(;) N
(;   this kind of events will only happen if the draw widget) N
(;   has been made sensitive to mouse events, i.e. the select region) N
(;   button has been pressed) N
(;) N
() N
(        widget_control,ev.id,get_uvalue=status) N
() N
(        maxx=status.maxx) N
(        maxy=status.maxy) N
() N
() N
(imseq_manip.pro) (Page 4/7) (Apr 09, 03 12:10) title
border
grestore
(Printed by Paolo_Grigis) rhead
(imseq_manip.pro) (2/4) (Wednesday April 09, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        IF ev.press EQ 1 THEN BEGIN) p n
(        ) N
(            status.dragging=1) N
(            status.first=1        ) N
(            status.boxcoor=[ev.x >0 <maxx, ev.x >0 <maxx, ev.y >0 <maxx $) N
(                           ,ev.y >0 <maxx]) N
() N
(            IF status.last THEN BEGIN) N
( ) N
(                status.last=0) N
(                newsides=status.sides) N
(                widget_cursor_plotbox,status.boxcoor,status.oldcoor,/nodraw $) N
(                                     ,sides=newsides) N
(            ENDIF) N
() N
(            status.oldcoor=[ev.x >0 <maxx, ev.x >0 <maxx, ev.y >0 <maxx $) N
(                           ,ev.y >0 <maxx]) N
() N
(        ENDIF) N
() N
(        IF ev.release EQ 1 THEN BEGIN) N
( ) N
(            status.dragging=0) N
(            status.last=1) N
( ) N
(        ENDIF) N
(    ) N
() N
(        IF status.dragging EQ 1 THEN BEGIN) N
(        ) N
(            status.boxcoor=[status.oldcoor[0],ev.x>0 <maxx, $) N
(                            status.oldcoor[2],ev.y>0 <maxy]) N
(            newsides=status.sides) N
() N
(            IF status.first THEN BEGIN) N
(           ) N
(                imseq_manip_plotbox,status.boxcoor,status.oldcoor,/noerase $) N
(                                   ,sides=newsides) N
(                status.first=0) N
() N
(            ENDIF $) N
(            ELSE BEGIN) N
() N
(                imseq_manip_plotbox,status.boxcoor,status.oldcoor $) N
(                                   ,sides=newsides) N
(            ENDELSE) N
() N
(            status.sides=newsides) N
(            status.oldcoor=status.boxcoor) N
(            widget_control,ev.id,set_uvalue=status) N
() N
(        ENDIF) N
() N
(           ) N
(        IF ev.release EQ 4 THEN BEGIN) N
() N
(            ;right mouse click, finalize the selection) N
() N
() N
(            ;coord transformation from pixel to device) N
(            newcoor=status.boxcoor) N
() N
(imseq_manip.pro) (Page 5/7) (Apr 09, 03 12:10) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            xmin=min\(newcoor[0:1]\)) p n
(            xmax=max\(newcoor[0:1]\)) N
(            ymin=min\(newcoor[2:3]\)) N
(            ymax=max\(newcoor[2:3]\)) N
() N
(            x1=\(convert_coord\(xmin,ymin,/to_data,/device\)\)[0]) N
(            y1=\(convert_coord\(xmin,ymin,/to_data,/device\)\)[1]) N
(            x2=\(convert_coord\(xmax,ymax,/to_data,/device\)\)[0]) N
(            y2=\(convert_coord\(xmax,ymax,/to_data,/device\)\)[1]) N
() N
(            status.outcoor=[x1,x2,y1,y2]) N
(            ) N
(            widget_control,ev.id,set_uvalue=status) N
() N
(            ;make the draw widget insensitive to further mouse activity) N
(            widget_control,ev.id,draw_button_events=0) N
(            widget_control,ev.id,draw_motion_events=0) N
(            ) N
() N
(            widget_control,ev.handler,get_uvalue=mapstr) N
(            mapstr.selcoor=status.outcoor) N
(            widget_control,ev.handler,set_uvalue=mapstr) N
() N
(            textwindow=widget_info\(ev.top,find_by_uname=') S
(frameinfo) str
('\)) p n
(            widget_control,textwindow,set_value=imseq_manip_outtext\(mapstr\)) N
() N
(        ENDIF) N
() N
(        widget_control,ev.id,set_uvalue=status) N
(   ) N
(    END) N
() N
(    ELSE : ) S
(print) K
(,') p
(Ciao) str
(') p n
() N
() N
(ENDCASE) N
() N
() N
(END ) N
() N
(PRO imseq_manip,ptrimseq) N
() N
(wh=where\(ptrimseq NE ptr_new\(\)\)) N
(tot=n_elements\(wh\)) N
(ptr=ptrarr\(tot\)) N
(FOR i=0,tot-1 DO ptr[i]=ptrimseq[wh[i]]) N
() N
(mapstr={imseq:ptr,totmap:ptr_new\(\),minfr:0,maxfr:n_elements\(ptr\)-1 $) N
(       ,selim:0,contour:0,limb:0,selcoor:[0.,0.,0.,0.]}) N
() N
(base=widget_base\(title=') S
(Image sequence manipulator) str
(',/row\)) p n
(root=widget_base\(base,/row,uvalue=mapstr,uname=') S
(root) str
('\)) p n
(menu1=widget_base\(root,group_leader=root,/column,/frame\)) N
(drawsurf1=widget_base\(root,group_leader=root,/column\)) N
(buttonm1=widget_base\(menu1,group_leader=menu1,/row,/frame\)) N
() N
() N
(;buttons) N
(     values=[') S
(Draw total Image) str
(',') p
(Draw selected Image) str
(',') p
(Contour plot) str
(' $) p n
(            ,') S
(Limb) str
(',') p
(Select region) str
(',') p
(Done) str
(']) p n
(     uname=') S
(commands) str
(') p n
(     bgroup=cw_bgroup\(buttonm1,values,/column,uname=uname\) ;,/frame\)) N
(imseq_manip.pro) (Page 6/7) (Apr 09, 03 12:10) title
border
grestore
(Printed by Paolo_Grigis) rhead
(imseq_manip.pro) (3/4) (Wednesday April 09, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(;end buttons) p n
() N
(;selection of current image) N
(    sellab=widget_base\(buttonm1,group_leader=buttonm1,/column\)) N
(    images=strtrim\(string\(indgen\(tot\)\),2\)) N
(    labelim=widget_label\(sellab,value=') S
(Selected Frame) str
('\)) p n
(    selim=widget_list\(sellab,value=images,ysize=5,uname=') S
(selectim) str
('\)) p n
(    widget_control,selim,set_list_select=mapstr.selim) N
(;end selection of current image) N
() N
(;selection of max and min) N
(    selectframe=widget_base\(menu1,group_leader=menu1,/row,/frame\)) N
() N
(    minval=strarr\(n_elements\(ptr\)\)) N
(    FOR i=0,n_elements\(ptr\)-1 DO BEGIN) N
(        minval[i]=strtrim\(i,2\)) N
(    ENDFOR) N
() N
(    sellab1=widget_base\(selectframe,group_leader=menu1,/column\)) N
(    label1=widget_label\(sellab1,value=') S
(First frame     ) str
('\)) p n
(    select1=widget_list\(sellab1,value=minval,ysize=5,uname=') S
(selectmin) str
('\)) p n
(    widget_control,select1,set_list_select=mapstr.minfr) N
() N
(    sellab2=widget_base\(selectframe,group_leader=menu1,/column\)) N
(    label2=widget_label\(sellab2,value=') S
(Last frame      ) str
('\)) p n
(    select2=widget_list\(sellab2,value=minval,ysize=5,uname=') S
(selectmax) str
('\)) p n
(    widget_control,select2,set_list_select=mapstr.maxfr) N
(;end selection of max end min) N
() N
(;text widget) N
(    text=widget_text\(menu1,value=imseq_manip_outtext\(mapstr\),ysize=10 $) N
(                    ,uname=') S
(frameinfo) str
('\)) p n
(;end text widget) N
() N
() N
() N
(draw=widget_draw\(drawsurf1,xsize=512,ysize=512,uname=') S
(drawwin) str
('\)) p n
() N
(widget_control,root,set_uvalue=mapstr) N
(widget_control,base,/realize) N
() N
(xmanager,') S
(imseq_manip) str
(',root,/no_block) p n
() N
(END) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(imseq_manip.pro) (Page 7/7) (Apr 09, 03 12:10) title
border
grestore
(Printed by Paolo_Grigis) rhead
(imseq_manip.pro) (4/4) (Wednesday April 09, 2003) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
