;+
;
; NAME:
;        imseq_manip
;
; PURPOSE: 
;        widget interface for image sequence manipolation
;
; CALLING SEQUENCE:
;
;        imseq_manip,ptrimseq
;
; INPUTS:
;
;        ptrimseq: a pointer to an image sequence
;
; OUTPUT:
;        
;
; VERSION:
;
;           APR-2003 written
;        09-APR-2003 last version
;
; AUTHOR
;       Paolo Grigis, Institute for Astronomy, ETH, Zurich
;-


;.comp ~/rapp_idl/imseq/imseq_manip.pro
;
;imseq_manip,ptr
;

PRO imseq_manip_plotmap,mapnumber,mapstr,drawwidget
;plot the map on the screen

IF (mapnumber LT 0) OR (mapnumber GE n_elements(mapstr.imseq)) $
THEN maptr=mapstr.totmap $
ELSE maptr=mapstr.imseq[mapnumber]

widget_control,drawwidget,get_value=winmap
;wset,winlc

plot_map,*maptr,window=winmap,contour=mapstr.contour,limb=mapstr.limb

END



PRO imseq_manip_plotbox,newcoor,oldcoor,sides=sides,noerase=noerase $
                       ,nodraw=nodraw

;
;This procedure draws and/or erase a rectangular frame on the current
;graphic window
;

color=255B
lines=ptrarr(4)

xoldmin=min(oldcoor[0:1])
xmin=min(newcoor[0:1])
xoldmax=max(oldcoor[0:1])
xmax=max(newcoor[0:1])
yoldmin=min(oldcoor[2:3])
ymin=min(newcoor[2:3])
yoldmax=max(oldcoor[2:3])
ymax=max(newcoor[2:3])

IF NOT keyword_set(noerase) THEN BEGIN

    tv,*sides[0],xoldmin,yoldmin,/true
    tv,*sides[1],xoldmax,yoldmin,/true
    tv,*sides[2],xoldmin,yoldmin,/true
    tv,*sides[3],xoldmin,yoldmax ,/true   

ENDIF
IF NOT keyword_set(nodraw) THEN BEGIN

    sides[0]=ptr_new(tvrd(xmin,ymin,xmax-xmin+1,1,/true))
    sides[1]=ptr_new(tvrd(xmax,ymin,1,ymax-ymin+1,/true))
    sides[2]=ptr_new(tvrd(xmin,ymin,1,ymax-ymin+1,/true))
    sides[3]=ptr_new(tvrd(xmin,ymax,xmax-xmin+1,1,/true))


    lines[0]=ptr_new(reform(make_array(3,xmax-xmin+1,1,/byte,value=color) $
                           ,3,xmax-xmin+1,1))
    lines[1]=ptr_new(reform(make_array(3,1,ymax-ymin+1,/byte,value=color) $
                           ,3,1,ymax-ymin+1))
    lines[2]=ptr_new(reform(make_array(3,1,ymax-ymin+1,/byte,value=color) $
                           ,3,1,ymax-ymin+1))
    lines[3]=ptr_new(reform(make_array(3,xmax-xmin+1,1,/byte,value=color) $
                           ,3,xmax-xmin+1,1))

    tv,*lines[0],xmin,ymin,/true
    tv,*lines[1],xmax,ymin,/true
    tv,*lines[2],xmin,ymin,/true
    tv,*lines[3],xmin,ymax,/true

ENDIF

END


FUNCTION imseq_manip_outtext,mapstr

;
;Returns the text to display as information in the text widget
;

startime=anytim((*(mapstr.imseq[mapstr.minfr])).time,/vms)
endtime =anytim((*(mapstr.imseq[mapstr.maxfr])).time,/vms)

outtext=['Start at frame '+strtrim(mapstr.minfr,2),startime,'' $
        ,'End at frame '+strtrim(mapstr.maxfr,2),endtime,'' $
        ,'Coordinate selection' $
        ,'('+strtrim(string(mapstr.selcoor[0]),2)+',' $
            +strtrim(string(mapstr.selcoor[2]),2)+')' $
        ,'('+strtrim(string(mapstr.selcoor[1]),2)+',' $
            +strtrim(string(mapstr.selcoor[3]),2)+')' ]

RETURN,outtext

END


PRO imseq_manip_event,ev

;
;Event handler
;

widget_control,ev.handler,get_uvalue=mapstr


CASE ev.ID OF 
    
    widget_info(ev.top,find_by_uname='selectim') : BEGIN

    mapstr.selim=ev.index
    widget_control,ev.handler,set_uvalue=mapstr

    drawwidget=widget_info(ev.top,find_by_uname='drawwin')
    imseq_manip_plotmap,mapstr.selim,mapstr,drawwidget
    ;plot_map,*(mapstr.imseq[mapstr.selim]),window=winnum2
    END


    widget_info(ev.top,find_by_uname='selectmin') : BEGIN

        IF ev.index NE mapstr.minfr THEN BEGIN
            mapstr.totmap=ptr_new()
            mapstr.minfr=ev.index

            textwindow=widget_info(ev.top,find_by_uname='frameinfo')
            widget_control,textwindow,set_value=imseq_manip_outtext(mapstr)

            widget_control,ev.handler,set_uvalue=mapstr
            
        ENDIF
    END

    widget_info(ev.top,find_by_uname='selectmax') : BEGIN

        IF ev.index NE mapstr.maxfr THEN BEGIN
            mapstr.totmap=ptr_new()
            mapstr.maxfr=ev.index

            textwindow=widget_info(ev.top,find_by_uname='frameinfo')
            widget_control,textwindow,set_value=imseq_manip_outtext(mapstr)
  
            widget_control,ev.handler,set_uvalue=mapstr
        ENDIF
    END     
 
    widget_info(ev.top,find_by_uname='commands') : BEGIN

        CASE ev.value OF

            0 : BEGIN ;Draw total Image

                IF mapstr.totmap EQ ptr_new() THEN BEGIN
                    mapstr.totmap=ptr_new(summaps(mapstr.imseq $
                                  ,min=mapstr.minfr,max=mapstr.maxfr))
                ENDIF

                widget_control,ev.handler,set_uvalue=mapstr
 
                drawwidget=widget_info(ev.top,find_by_uname='drawwin')
                imseq_manip_plotmap,-1,mapstr,drawwidget


                ;widget_control,winnum,get_value=winnum2
                ;plot_map,*(mapstr.totmap),window=winnum2 $
                ;        ,contour=mapstr.contour,limb=mapstr.limb
            END

            1 : BEGIN ;Draw selected Image
 
                drawwidget=widget_info(ev.top,find_by_uname='drawwin')
                imseq_manip_plotmap,mapstr.selim,mapstr,drawwidget

                ;winnum=widget_info(ev.top,find_by_uname='drawwin')
                ;widget_control,winnum,get_value=winnum2
                ;plot_map,*(mapstr.imseq[mapstr.selim]),window=winnum2 $
                ;        ,contour=mapstr.contour,limb=mapstr.limb
            END

            2 : BEGIN ;Contour plot
       
                mapstr.contour=1-mapstr.contour
                widget_control,ev.handler,set_uvalue=mapstr
 
                drawwidget=widget_info(ev.top,find_by_uname='drawwin')
                imseq_manip_plotmap,mapstr.selim,mapstr,drawwidget

            END

            3 : BEGIN ;Limb

                mapstr.limb=1-mapstr.limb
                widget_control,ev.handler,set_uvalue=mapstr

                drawwidget=widget_info(ev.top,find_by_uname='drawwin')
                imseq_manip_plotmap,mapstr.selim,mapstr,drawwidget

            END

            4 : BEGIN ;Select region

                draw=widget_info(ev.top,find_by_uname='drawwin')

                status={dragging:0,first:0,last:0,oldcoor:[0,0,0,0] $
                       ,boxcoor:[0,0,0,0],sides:ptrarr(4),maxx:0,maxy:0 $
                       ,outcoor:[0,0,0,0]}

                geom=widget_info(draw,/geometry)
                status.maxx=geom.draw_xsize-1
                status.maxy=geom.draw_ysize-1

                widget_control,draw,set_uvalue=status

                ;makes the widget sensitive to mouse input events
                widget_control,draw,/draw_button_events
                widget_control,draw,/draw_motion_events


                ;widget_control,draw,get_value=winnum2
                ;wset,winnum2
               
            END

            5 : BEGIN ; 'Lightcurve'

                baselc=widget_base(title='Lightcurve',/row,group_leader=ev.top)

                drawlc=widget_draw(baselc,xsize=700,ysize=500 $
                                  ,uname='drawlc')

                
                ;plot,findgen(100),findgen(100)
                widget_control,baselc,/hourglass
                imseq_ltc,mapstr.imseq,lev=0,tim=tim,lc=lc,box=mapstr.selcoor $
                         ,err=err
                IF err EQ 0 THEN BEGIN 
                     widget_control,baselc,/realize
                     widget_control,drawlc,get_value=winlc
                     wset,winlc
                     utplot,tim-tim[0],lc,tim[0]

                     drawwidget=widget_info(ev.top,find_by_uname='drawwin')
                     ;widget_control,drawwidget,get_value=winmap
                     imseq_manip_plotmap,-1,mapstr,drawwidget
                     ;!P=*mapstr.plot_p
                     ;imseq_manip_plotmawinmapp,mapstr.selim,mapstr,drawwidget
 
                ENDIF $
                ELSE print,['An error occurred during the lightcurve '+ $
                           'computation.','Please select another region.']
                   
                
            END

            6 : BEGIN ; 'Done'

                widget_control,ev.top,/destroy
            END

            ELSE : RETURN

        ENDCASE

    END
 
    widget_info(ev.top,find_by_uname='drawwin') : BEGIN
;
;   this kind of events will only happen if the draw widget
;   has been made sensitive to mouse events, i.e. the select region
;   button has been pressed
;

        widget_control,ev.id,get_uvalue=status

        maxx=status.maxx
        maxy=status.maxy

        drawwidget=widget_info(ev.top,find_by_uname='drawwin')
        widget_control,drawwidget,get_value=plotwin
        wset,plotwin
       
        IF ev.press EQ 1 THEN BEGIN
        
            status.dragging=1
            status.first=1        
            status.boxcoor=[ev.x >0 <maxx, ev.x >0 <maxx, ev.y >0 <maxx $
                           ,ev.y >0 <maxx]

            IF status.last THEN BEGIN
 
                status.last=0
                newsides=status.sides
                widget_cursor_plotbox,status.boxcoor,status.oldcoor,/nodraw $
                                     ,sides=newsides
            ENDIF

            status.oldcoor=[ev.x >0 <maxx, ev.x >0 <maxx, ev.y >0 <maxx $
                           ,ev.y >0 <maxx]

        ENDIF

        IF ev.release EQ 1 THEN BEGIN
 
            status.dragging=0
            status.last=1
 
        ENDIF
    

        IF status.dragging EQ 1 THEN BEGIN
        
            status.boxcoor=[status.oldcoor[0],ev.x>0 <maxx, $
                            status.oldcoor[2],ev.y>0 <maxy]
            newsides=status.sides

            IF status.first THEN BEGIN
           
                imseq_manip_plotbox,status.boxcoor,status.oldcoor,/noerase $
                                   ,sides=newsides
                status.first=0

            ENDIF $
            ELSE BEGIN

                imseq_manip_plotbox,status.boxcoor,status.oldcoor $
                                   ,sides=newsides
            ENDELSE

            status.sides=newsides
            status.oldcoor=status.boxcoor
            widget_control,ev.id,set_uvalue=status

        ENDIF

           
        IF ev.release EQ 4 THEN BEGIN

            ;right mouse click, finalize the selection

            widget_control,ev.id,get_value=winmap
            wset,winmap

            ;coord transformation from pixel to device
            newcoor=status.boxcoor

            xmin=min(newcoor[0:1])
            xmax=max(newcoor[0:1])
            ymin=min(newcoor[2:3])
            ymax=max(newcoor[2:3])

            x1=(convert_coord(xmin,ymin,/to_data,/device))[0]
            y1=(convert_coord(xmin,ymin,/to_data,/device))[1]
            x2=(convert_coord(xmax,ymax,/to_data,/device))[0]
            y2=(convert_coord(xmax,ymax,/to_data,/device))[1]

            status.outcoor=[x1,x2,y1,y2]
            
            widget_control,ev.id,set_uvalue=status

            ;make the draw widget insensitive to further mouse activity
            widget_control,ev.id,draw_button_events=0
            widget_control,ev.id,draw_motion_events=0
            

            widget_control,ev.handler,get_uvalue=mapstr
            mapstr.selcoor=status.outcoor
            widget_control,ev.handler,set_uvalue=mapstr

            textwindow=widget_info(ev.top,find_by_uname='frameinfo')
            widget_control,textwindow,set_value=imseq_manip_outtext(mapstr)

        ENDIF

        widget_control,ev.id,set_uvalue=status
   
    END

    ELSE : print,'Ciao'


ENDCASE


END 

PRO imseq_manip,ptrimseq

;variable initialisation stuff

wh=where(ptrimseq NE ptr_new())
tot=n_elements(wh)
ptr=ptrarr(tot)
FOR i=0,tot-1 DO ptr[i]=ptrimseq[wh[i]]

;ptr is now guaranteed composed only of valid pointers

mapstr={imseq:ptr,totmap:ptr_new(),minfr:0,maxfr:n_elements(ptr)-1 $
       ,selim:0,contour:0,limb:1,selcoor:[0.,0.,0.,0.]};,plot_p:ptr_new()}

map=summaps(ptr)

mapstr.selcoor=[map.xc-map.dx*(size(map.data))[1] $
               ,map.xc+map.dx*(size(map.data))[1] $
               ,map.yc-map.dy*(size(map.data))[2] $
               ,map.yc+map.dy*(size(map.data))[2] ]

mapstr.totmap=ptr_new(map)


;widget hierarchy creation

base=widget_base(title='Image sequence manipulator',/row)
root=widget_base(base,/row,uvalue=mapstr,uname='root')

menu1=widget_base(root,group_leader=root,/column,/frame)
drawsurf1=widget_base(root,group_leader=root,/column)
buttonm1=widget_base(menu1,group_leader=menu1,/row,/frame)


;buttons
    values=['Draw total Image','Draw selected Image','Contour plot' $
           ,'Limb','Select region','Lightcurve','Done']
    uname='commands'
    bgroup=cw_bgroup(buttonm1,values,/column,uname=uname) ;,/frame)
;end buttons

;selection of current image
    sellab=widget_base(buttonm1,group_leader=buttonm1,/column)
    images=strtrim(string(indgen(tot)),2)
    labelim=widget_label(sellab,value='Selected Frame')
    selim=widget_list(sellab,value=images,ysize=10,uname='selectim')
    widget_control,selim,set_list_select=mapstr.selim
;end selection of current image

;selection of max and min
    selectframe=widget_base(menu1,group_leader=menu1,/row,/frame)

    minval=strarr(n_elements(ptr))
    FOR i=0,n_elements(ptr)-1 DO BEGIN
        minval[i]=strtrim(i,2)
    ENDFOR

    sellab1=widget_base(selectframe,group_leader=menu1,/column)
    label1=widget_label(sellab1,value='First frame     ')
    select1=widget_list(sellab1,value=minval,ysize=5,uname='selectmin')
    widget_control,select1,set_list_select=mapstr.minfr

    sellab2=widget_base(selectframe,group_leader=menu1,/column)
    label2=widget_label(sellab2,value='Last frame      ')
    select2=widget_list(sellab2,value=minval,ysize=5,uname='selectmax')
    widget_control,select2,set_list_select=mapstr.maxfr
;end selection of max end min

;text widget
    text=widget_text(menu1,value=imseq_manip_outtext(mapstr),ysize=10 $
                    ,uname='frameinfo')
;end text widget

;draw widget
draw=widget_draw(drawsurf1,xsize=512,ysize=512,uname='drawwin')
;end draw widget


;print,mapstr.selcoor

widget_control,root,set_uvalue=mapstr
  
widget_control,base,/realize

;widget_control,draw,get_value=win
;wset,win
;plot_map,map,/limb
imseq_manip_plotmap,-1,mapstr,draw

;mapstr.plot_p=ptr_new(!P)
widget_control,root,set_uvalue=mapstr

              
xmanager,'imseq_manip',root,/no_block

END












