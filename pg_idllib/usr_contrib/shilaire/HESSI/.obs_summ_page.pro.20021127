;+
;NAME:
; obs_summ_page.pro
;PROJECT:
;
; HESSI at ETHZ
;
;CATEGORY:
; 
;PURPOSE:
;
;PLANNED IMPROVEMENT:
;
;CALLING SEQUENCE:
; obs_summ_page,time_interval
;
;INPUT:
; time_interval = a 2-element array,in a format accepted by ANYTIM
;
;OPTIONAL INPUT:	
;
;OUTPUT:
; Observing Summary Information for that time range
;
;KEYWORDS:
;	CORRECTED_COUNTRATE: if set, will plot corrected countrates instead of the default raw count rates.
;	GOES : if set, will plot GOES data instead of normalized modulation.
;EXAMPLE:
;
;HISTORY:
;	Written in a hurry on 2002/04/14 by PSH
;
;	Modified: 2002/04/16 : added aspect solution
;	Modified: 2002/04/30 : modified to be graphics device-independant, removed keyword JPG
;	Modified: 2002/08/19 : modified to accomodate new structure definitions for obs. summary objects.
;	Modified: 2002/09/11 : because somebody goofed up again: rates are now sometimes compressed!
;	Modified: 2002/10/03 : added new flags.
;	Modified: 2002/10/03A: uses linecolors.pro instead of myct3.pro
;	Modified: 2002/10/11: Modified to accomodate PS device (i.e. just changed charsize).
;	Modified: 2002/11/22: 	replaced REAR_DECIMATION flag by NMZ_FLAG + SMZ_FLAG
;				added keyword /CORRECTED_COUNTRATE
;				added keyword /GOES
;
;-



PRO obs_summ_page,time_intv,filename=filename,NOBREAK=NOBREAKS,CORRECTED_COUNTRATE=CORRECTED_COUNTRATE,GOES=GOES

xsize=800;900
ysize=900
charsize=2.0

CASE !D.NAME OF 
	'Z': BEGIN DEVICE,/CLOSE & DEVICE, set_resolution=[xsize,ysize] & END
	'X': BEGIN WINDOW,xs=xsize,ys=ysize,/FREE & END
	'PS': BEGIN charsize=1.0 & END
	ELSE: PRINT,"This routine wasn't designed or tested for graphic devices other than X, Z or PS: try at your own risk!"
ENDCASE

Error_Status=0
IF KEYWORD_SET(NOBREAK) THEN CATCH, Error_Status
	IF Error_Status NE 0 THEN BEGIN
		CATCH,/CANCEL
		Error_Status=0
		PRINT,'...............................CAUGHT ERROR !......................'
		HELP, CALLS=caller_stack
		PRINT, 'Error index: ', Error_status
		PRINT, 'Error message:', !ERR_STRING
		PRINT,'Error caller stack:',caller_stack
	;!error_state.code=Error_Status
		!error_state.code=Error_Status			
		HELP, /Last_Message, Output=theErrorMessage
		FOR j=0,N_Elements(theErrorMessage)-1 DO PRINT, theErrorMessage[j]
		PRINT,'...................... scratch Obs. Summary page...........'		
		GOTO,THEEND
	ENDIF

!P.multi=[0,1,4]

loadct,1
linecolors
TVLCT,r,g,b,/GET

oso=obj_new('hsi_obs_summary')
oso->set,obs_time_interval=time_intv

;====================================================================================
;count rates
;====================================================================================
	rates_struct=oso->getdata()
	rates=rates_struct.COUNTRATE
	IF datatype(rates) EQ 'BYT' THEN BEGIN
		PRINT,".............. WARNING: looks like rates are in compressed (BYTE) form....... decompressing....."
		rates=hsi_obs_summ_decompress(rates)
	ENDIF
	times=oso->getdata(/time)
;========================
;corrected counrates ???	
IF KEYWORD_SET(CORRECTED_COUNTRATE) THEN BEGIN
	ro=OBJ_NEW('hsi_obs_summ_rate')
	ro->set,obs_time_interval=time_intv
	tmp=ro->getdata()
	rates=ro->corrected_countrate()
	OBJ_DESTROY,ro
ENDIF
;========================
;----------- below 100 keV
	maxcts=MAX(rates[0:5,*])
				
	title='HESSI Observing Summary, starting on '+anytim(time_intv(0),/ECS,/trunc)+' UT'
	utplot,times-times(0),rates[0,*],times(0), xtitle='', $
		ytitle='counts/s/detector',color=2,yrange=[1,maxcts], xstyle=1,$
		title=title,charsize=charsize,xmargin=[10,2],ymargin=[1,2],/ylog
	
	logsep=2.
	
	FOR i=1,4 DO BEGIN
		CASE i OF
			1: color=4
			2: color=5
			3: color=7
			ELSE: color=9
		ENDCASE
		outplot,times-times(0),rates[i,*], color=color	
	ENDFOR

	XYOUTS,/DATA,times(0.03*N_ELEMENTS(times))-times(0),10^!Y.CRANGE[1]/logsep^1,'3-6 keV',color=2,charsize=charsize/2
	XYOUTS,/DATA,times(0.03*N_ELEMENTS(times))-times(0),10^!Y.CRANGE[1]/logsep^2,'6-12 keV',color=4,charsize=charsize/2
	XYOUTS,/DATA,times(0.03*N_ELEMENTS(times))-times(0),10^!Y.CRANGE[1]/logsep^3,'12-25 keV',color=5,charsize=charsize/2
	XYOUTS,/DATA,times(0.03*N_ELEMENTS(times))-times(0),10^!Y.CRANGE[1]/logsep^4,'25-50 keV',color=7,charsize=charsize/2
	XYOUTS,/DATA,times(0.03*N_ELEMENTS(times))-times(0),10^!Y.CRANGE[1]/logsep^5,'50-100 keV',color=9,charsize=charsize/2

;------------ above 100 keV
	!P.multi=[6,1,8]
	maxcts=MAX(rates[5:8,*])
				
	utplot,times-times(0),rates[5,*],times(0), xtitle='', $
		ytitle='counts/s/detector',color=2,yrange=[1,maxcts], xstyle=1,$
		title='',charsize=charsize,xmargin=[10,2],ymargin=[1,1],/ylog
	
	logsep=3.
	
	FOR i=6,8 DO BEGIN
		CASE i OF
			6: color=4
			7: color=5
			ELSE: color=7
		ENDCASE
		outplot,times-times(0),rates[i,*], color=color	
	ENDFOR

	XYOUTS,/DATA,times[0.03*N_ELEMENTS(times)]-times[0],10^!Y.CRANGE[1]/logsep^1,'0.1-0.3 MeV',color=2,charsize=charsize/2
	XYOUTS,/DATA,times[0.03*N_ELEMENTS(times)]-times[0],10^!Y.CRANGE[1]/logsep^2,'0.3-0.8 MeV',color=4,charsize=charsize/2
	XYOUTS,/DATA,times[0.03*N_ELEMENTS(times)]-times[0],10^!Y.CRANGE[1]/logsep^3,'0.8-7 MeV',color=5,charsize=charsize/2
	XYOUTS,/DATA,times[0.03*N_ELEMENTS(times)]-times[0],10^!Y.CRANGE[1]/logsep^4,'7-20 MeV',color=7,charsize=charsize/2


;====================================================================================
;mod variance, or GOES if keyword /GOES has been set.
;====================================================================================
IF NOT KEYWORD_SET(GOES) THEN BEGIN
	;oso->plot,class_name='mod_variance',charsize=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1,title=''
	mvtimes=oso->getdata(class_name='mod_variance',/time)
	mvdata_struct=oso->getdata(class_name='mod_variance')
	mvdata=mvdata_struct.MOD_VARIANCE
	mvinfo=oso->get(class_name='mod_variance')
	
	utplot,mvtimes-mvtimes[0],mvdata[0,*]/10.,mvtimes[0], xtitle='',ytit='Normalized!Cmodulation',tit='', xstyle=1,charsize=charsize,xmargin=[10,2],ymargin=[1,1],color=9
	outplot,mvtimes-mvtimes[0],mvdata[1,*]/10.,color=12
	
	XYOUTS,mvtimes(0.03*N_ELEMENTS(mvtimes))-mvtimes[0],0.85*!Y.CRANGE[1],'Energy band: '+strn(FIX(mvinfo.ENERGY_EDGES[0]))+'-'+strn(FIX(mvinfo.ENERGY_EDGES[1]))+' keV',charsize=charsize/2
	XYOUTS,mvtimes(0.03*N_ELEMENTS(mvtimes))-mvtimes[0],0.7*!Y.CRANGE[1],'Collimator '+strn(mvinfo.DIM1_IDS[0]),color=9,charsize=charsize/2
	XYOUTS,mvtimes(0.03*N_ELEMENTS(mvtimes))-mvtimes[0],0.55*!Y.CRANGE[1],'Collimator '+strn(mvinfo.DIM1_IDS[1]),color=12,charsize=charsize/2
ENDIF ELSE BEGIN
	plot_goes,anytim(time_intv[0],/ECS),anytim(time_intv[1],/ECS),/one_minute,color=[4,7],/nodeftitle,xtitle='',ytitle='GOES X-rays',xmargin=[10,2],ymargin=[1,1],charsize=charsize,thick=3
ENDELSE	
;====================================================================================
;particle rate
;====================================================================================
	;oso->plot,class_name='hsi_particle_rate',charsiz=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1,title=''


;====================================================================================
;Qlook pointing, roll_angle, roll_period
;====================================================================================


;====================================================================================
;Flags
;====================================================================================
	!P.MULTI=[2,1,4]
	
	flagdata_struct=oso->getdata(class_name='obs_summ_flag')
	flagdata=flagdata_struct.FLAGS
	flaginfo=oso->get(class_name='obs_summ_flag')
	flagtimes=oso->getdata(class_name='obs_summ_flag',/time)

	; 'bit-like' flags:
	wantedflags=[0,1,2,11,12,16,17,14]
	IF flaginfo.flag_ids[24] EQ 'PARTICLE_FLAG' THEN wantedflags=[24,wantedflags]
	IF flaginfo.flag_ids[23] EQ 'AAZ_FLAG' THEN wantedflags=[23,wantedflags]	
	i=0

	utplot,flagtimes-flagtimes(0),flagdata(wantedflags(i),*),flagtimes(0),charsiz=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1,$
		yrange=[-2,1+2*N_ELEMENTS(wantedflags)],ytickname=[' ',' ',' ',' ',' ',' ',' ',' '],ytitle='Flags',yticklen=0.00001,ystyle=1,/NODATA

	FOR i=0,N_ELEMENTS(wantedflags)-1 DO BEGIN
		fdata=flagdata(wantedflags(i),*)
		
		CASE wantedflags(i) OF
			0: color=2	;SAA
			1: color=10	;NIGHT
			2: color=5	;FLARE
			11: BEGIN 
				color=4	;TRANSMITTER
				fdata=FLOAT(fdata)/100.
			END
			12: BEGIN
				color=5	;SUNLIGHT
				fdata=FLOAT(fdata)/100.
			END			
			14: color=12	;ATTENUATOR
			16: color=9	;NONSOLAR
			17: color=2	;GAP
			23: color=6	;AAZ_FLAG
			24: color=4	;PARTICLE_FLAG
			ELSE:color=9
		ENDCASE
		outplot,flagtimes-flagtimes(0),2*i-1+fdata,flagtimes(0), color=color
		XYOUTS,/DATA,flagtimes(0.01*N_ELEMENTS(flagtimes))-flagtimes(0),2*i-1,flaginfo.flag_ids(wantedflags(i)),color=color,charsize=charsize/2
	ENDFOR
		

!P.MULTI=[2,1,8]

	; decimation flags:
	wantedflags=[18,19]
	IF flaginfo.flag_ids[25] EQ 'REAR_DECIMATION' THEN  wantedflags=[wantedflags,25]

	yrange=[1,1000]
	utplot,flagtimes-flagtimes(0),flagdata(wantedflags(0),*),flagtimes(0),charsiz=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1, color=250,$
		yrange=yrange,ytitle='DECIMATION',ystyle=1,/YLOG,/NODATA
	FOR i=0,N_ELEMENTS(wantedflags)-1 DO BEGIN
		fdata=flagdata(wantedflags[i],*)
		ligne=flaginfo.flag_ids(wantedflags[i])

		CASE wantedflags(i) OF			
			18: color=7	;DECIMATION_ENERGY
			19: color=4	; DECIMATION_WEIGHT
			25: BEGIN
				color=9	; REAR_DECIMATION
					fdata=flagdata[21,*]+flagdata[22,*]				
				fdata=fdata+0.5
			END
			ELSE:color=6
		ENDCASE
		outplot,flagtimes-flagtimes(0),fdata,flagtimes(0), color=color
		XYOUTS,/DATA,flagtimes(0.025*N_ELEMENTS(flagtimes))-flagtimes(0),yrange(1)/(3^(i+1)),ligne,color=color,charsize=charsize/2
	ENDFOR




	; other:
	wantedflags=[15]
	IF flaginfo.flag_ids[20] EQ 'MAX_DET_VS_TOT' THEN wantedflags=[wantedflags,20]
	yrange=[0,100]
	utplot,flagtimes-flagtimes[0],flagdata(wantedflags[0],*),flagtimes[0],charsiz=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1, color=5,$
		yrange=yrange,ytitle='GEOMAGNETIC!Clatitude',ystyle=1,xtickname=REPLICATE(' ',10)
	XYOUTS,/DATA,flagtimes(0.025*N_ELEMENTS(flagtimes))-flagtimes[0],yrange(1)*2/3,flaginfo.flag_ids(wantedflags[0]),color=5,charsize=charsize/2
	FOR i=1,N_ELEMENTS(wantedflags)-1 DO BEGIN
		fdata=flagdata(wantedflags[i],*)
		ligne=flaginfo.flag_ids(wantedflags[i])

		CASE wantedflags(i) OF			
			20: color=4	;MAX_DET_VS_TOT
			ELSE:color=9
		ENDCASE
		outplot,flagtimes-flagtimes[0],fdata,flagtimes[0], color=color
		XYOUTS,/DATA,times[0.025*N_ELEMENTS(flagtimes)]-flagtimes[0],yrange(1)-(i+2)*yrange(1)/6,ligne,color=color,charsize=charsize/2
	ENDFOR

	ephdata_struct=oso->getdata(class_name='ephemeris')      
	ephdata=ephdata_struct.XYZ_ECI
	ephtimes=oso->getdata(class_name='ephemeris',/time)
	tmp=eci2geographic(ephdata[0:2,*],ephtimes)
	tmp=geo2mag(tmp[0:1,*])
	outplot,ephtimes-ephtimes[0],abs(tmp[0,*]), color=9
	XYOUTS,/DATA,times[0.1*N_ELEMENTS(ephtimes)]-ephtimes[0],yrange[1]*5/6,'Absolute geomagnetic latitude',color=9,charsize=charsize/2
	

;====================================================================================
;SAS solution (at the end, because still buggy)
;====================================================================================

;err_status=0
;CATCH,err_status
;	IF err_status NE 0 THEN GOTO,AFTERSAS
;	
;	ao=hsi_aspect_solution() 
;	ao->set,aspect_cntl_level=0 	
;	ao->set,obs_time_interval=anytim(time_intv)
;	;ao->set,aspect_time_range=anytim(time_intv)	
;	as=ao->getdata()
;	qual=ao->get(/as_quality)
;	
;	times=as.time * 2d^(-7)
;	t0=hsi_sctime2any(as.t0)
;	quality=qual.triangle
;	utplot,times,abs(quality),t0,xstyle=1,charsize=charsize,xmargin=[10,2],ymargin=[2,2],timerange=anytim(time_intv), $
;		 /ylog, yrange=[0.01,100], xtitle='', ytitle='[arcsec]', title='SAS :  Size of Reduced Triangle'
;	
;AFTERSAS:
;	obj_destroy,oa
;CATCH,/CANCEL

;====================================================================================
;====================================================================================

THEEND:

IF KEYWORD_SET(filename) THEN BEGIN
	TVLCT,r,g,b,/GET
	write_png,filename,TVRD(),r,g,b
ENDIF

;;;IF ((!D.NAME EQ 'Z') OR (!D.NAME EQ 'PS')) THEN DEVICE,/CLOSE
!P.MULTI=0
OBJ_DESTROY,oso
END


