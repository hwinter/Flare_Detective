;+
;NAME:
; obs_summ_page.pro
;
;PROJECT:
;	HESSI at ETHZ
;
;CATEGORY:
; 
;PURPOSE:
;
;PLANNED IMPROVEMENT/MODIFICATIONS:
;	endless...
;
;CALLING SEQUENCE:
; obs_summ_page,time_interval
;
;INPUT:
; time_interval = a 2-element array,in a format accepted by ANYTIM
;
;OPTIONAL INPUT:	
;
;OUTPUT:
; Observing Summary Information for that time range
;
;KEYWORDS:
;
;	/CORRECTED_COUNTRATE: if set, will plot corrected countrates 
;          instead of the default raw count rates.
;
;	/GOES : if set, will plot GOES data instead of normalized 
;          modulation.
;		if set to 2, will add GOES events labels
;
;	/NOCRASH: if set, routine will not crash if something goes 
;          wrong (lack of data, etc...)
;
;	filename: if used, will make a PNG output using the value of
;	   the keyword as filename; gives the postscript filename if
;	   combined with the PS keyword
;
;       /PS : if set, will direct the output to a postscript file named
;          idl.ps or, if filenmae is set, to <filename>.ps
;		PS=1 : B&W
;		PS=2 : Color
;
;	/LIVETIME: if set, puts detector livetimes instead of geomagnetic latitude.
;		if a 2-D array, it'll be used as yrange for the plot.
;	
;	/PARTICLES: if set, replaces high energy countrates by LO/HI particle rates from monitor rates
;
;	/SEGMENTS: if set, low & high energy countrates are replaced by countrates in front & rear segments
;			this keyword supersedes the /PARTICLES, /CORRECTED_COUNTRATE and /GOES keywords.
;
;	/OLD_WINDOW: if set, and using the 'X' device, will use the previous window, not create a new one.
;
;	/LIN: countrates (Countrates, segments, particles) are displayed in linear scale instead of log scale.
;
;	/SAS: will plot the size of the SAS reduced triangle. Setting it to 2 will use the Observing Summary's sqrt value.
;
;	/ENERGY: the FRONT decimation channels will be converted to energies, using Paolo's routine.
;
;	/POINTING: will plot (x,y) pointing and roll period instead of countrates, as well as sqrt of size of reduced SAS triangle.
;	
;
;EXAMPLE:
;	obs_summ_page,'2002/02/26 '+['10:20','10:35'],/GOES
;
;HISTORY:
;	Written in a hurry on 2002/04/14 by PSH
;
;	Modified: 2002/04/16 : added aspect solution
;	Modified: 2002/04/30 : modified to be graphics
;	   device-independant, removed keyword JPG
;	Modified: 2002/08/19 : modified to accomodate new structure
;	   definitions for obs. summary objects. 
;	Modified: 2002/09/11 : because somebody goofed up again: rates
; 	   are now sometimes compressed! 
;	Modified: 2002/10/03 : added new flags.
;	Modified: 2002/10/03A: uses linecolors.pro instead of myct3.pro
;	Modified: 2002/10/11: Modified to accomodate PS device
;	   (i.e. just changed charsize). 
;	Modified: 2002/11/22: 	replaced REAR_DECIMATION flag by
;	   NMZ_FLAG + SMZ_FLAG; added keyword /CORRECTED_COUNTRATE;
;	   added keyword /GOES 
;	Modified: 2002/11/27: Uses GOES-8 three-second data instead of
;	   1-minute data. 
;	Modified: 2003/01/10: Uses some additional new flags
;	   (REAR_DEC_WEIGHT, ...). Uses Paolo's 'plotgoes' instead of
;	   'goes_plot' (which has 
;          been changed in a BAD manner to accomodate GOES 10...) 
;       Modified: 2003/01/30: PS keyword introduced to facilitate
;          printing by GP.
;	Modified: 2003/05/21: added /LIVETIME keyword + some minor aesthetical changes.
;	Modified: 2003/05/29: FRONTS_OFF flag is also displayed.
;	Modified: 2003/06/12: Added /PARTICLES keyword
;	Modified: 2003/07/30: Added /SEGMENTS keyword + says nicely when no GOES data are available.
;	Modified: 2003/09/08: Added /OLD_WINDOW keyword
;	Modified: 2003/09/18: Added /LIN keyword
;	Modified: 2003/11/14: Added /SAS keyword
;	Modified: 2004/02/11: Uses Paolo's pg_plotgoes.pro routine for GOES stuff...
;	Modified: 2004/04/30: Added keyword /ENERGY
;	Modified: 2004/06/13: Added keyword /POINTING
;	Modified: 2004/08/05: Added FRONT_RATIO_1225 and BAD_PACKETS flags...
;	Modified: 2005/03/02: keyword GOES=2 : adds some GOES event labels
;	Modified: 2005/05/04: keyword PS=2 for color PS plots...
;	Modified: 2005/05/13: Modified SAS call (with Martin): Now also works when I start at night!!!
;-



PRO obs_summ_page,time_intv,filename=filename,NOCRASH=NOCRASH,CORRECTED_COUNTRATE=CORRECTED_COUNTRATE,GOES=GOES,PS=PS,LIVETIME=LIVETIME, PARTICLES=PARTICLES, SEGMENTS=SEGMENTS, OLD_WINDOW=OLD_WINDOW, LIN=LIN, SAS=SAS, ENERGY=ENERGY,POINTING=POINTING

clear_utplot
xsize=800;900
ysize=900
charsize=2.0

IF KEYWORD_SET(LIN) THEN LIN=1 ELSE LIN=0

IF keyword_set(PS) THEN BEGIN

     old_dev       = !D.NAME
     old_x_thick   = !X.THICK
     old_y_thick   = !Y.THICK
     old_charthick = !P.CHARTHICK
     old_p_thick   = !P.THICK

     !P.THICK      = 3
     !X.THICK      = 3
     !Y.THICK      = 3
     !P.CHARTHICK  = 3
     charsize      = 1

     SET_PLOT, 'PS' 
     LOADCT,0
     DEVICE,/portrait

     ; OFFSET and SIZE for A4 sheets in cm
     DEVICE,XSIZE=18,YSIZE=24,YOFFSET=3
  
     IF keyword_set(filename) THEN BEGIN
        DEVICE,FILENAME = filename+'.ps'
     ENDIF

ENDIF ELSE PS=0

CASE !D.NAME OF 
	'Z': BEGIN DEVICE,/CLOSE & DEVICE, set_resolution=[xsize,ysize] & END
	'X': BEGIN 
		IF NOT KEYWORD_SET(OLD_WINDOW) THEN WINDOW,xs=xsize,ys=ysize,/FREE
	END
	'PS': BEGIN charsize=1 & END
	ELSE: PRINT,"This routine wasn't designed or tested for graphic devices other than X, Z or PS: try at your own risk!"
ENDCASE

Error_Status=0
IF KEYWORD_SET(NOCRASH) THEN CATCH, Error_Status
	IF Error_Status NE 0 THEN BEGIN
		CATCH,/CANCEL
		PRINT,'...............................CAUGHT ERROR !...................................'
		;PRINT, 'Error index: ', Error_status
		;PRINT, 'Error message:', !ERR_STRING
		;HELP, CALLS=caller_stack
		;PRINT,'Error caller stack:',caller_stack
		;;;!error_state.code=Error_Status
		PRINT,'..........................ERROR MESSAGES:........................................'
		HELP, /Last_Message, Output=theErrorMessage
		FOR j=0,N_Elements(theErrorMessage)-1 DO PRINT, theErrorMessage[j]
		PRINT,'..........................END OF ERROR MESSAGES...................................'
		PRINT,'...................... scratch Obs. Summary page...........'		
		;;;Error_Status=0
		GOTO,THEEND
	ENDIF

!P.multi=[0,1,4]

; make B-W plot in case of keyword PS set

CASE PS OF
	1: LOADCT,0
	ELSE: BEGIN
	  LOADCT,1
	  linecolors
	END
ENDCASE
IF PS EQ 2 THEN BEGIN
	; yellow on white paper is really too bright. Change it.
	TVLCT,r,g,b,/GET
	r[5]=225
	g[5]=225
	b[5]=0	
	TVLCT,r,g,b
ENDIF

oso=OBJ_NEW('hsi_obs_summary')
oso->set,obs_time_interval=time_intv
title='HESSI Observing Summary, starting on '+anytim(time_intv[0],/ECS,/trunc)+' UT'

IF KEYWORD_SET(SEGMENTS) THEN BEGIN
	qlo=hsi_qlook_rate_per_det()
	qlo->set,obs_time_interval=time_intv
	qlodata=qlo->getdata()
	IF datatype(qlodata.COUNTRATE) EQ 'BYT' THEN qlorates=hsi_obs_summ_decompress(qlodata.COUNTRATE) ELSE qlorates=qlodata.COUNTRATE
	qlotimes=qlo->getdata(/time)
	OBJ_DESTROY,qlo
	
	maxcts=MAX(qlorates[0:8,*])
	IF LIN THEN yrng=[0,maxcts] ELSE yrng=[1,maxcts]
	utplot,qlotimes-qlotimes[0],qlorates[0,*],qlotimes[0], trange=anytim(time_intv,/yoh), xtitle='', xstyle=1, $
		ytitle='counts/s !C(FRONT SEGMENTS)',color=2,yrange=yrng, YLOG=1-LIN, $
		title=title,charsize=charsize,xmargin=[10,2],ymargin=[1,2]
	FOR i=1,8 DO outplot,qlotimes-qlotimes[0],qlorates[i,*],color=2+i
	plot_label,/NOLINE,/DEV,[0.03,-1],'DETECTORS: '
	FOR i=0,8 DO plot_label,/NOLINE,/DEV,[0.03+0.02*i,-2],strn(i+1),color=i+2
	maxcts=MAX(qlorates[9:17,*])
	IF LIN THEN yrng=[0,maxcts] ELSE yrng=[1,maxcts]
	utplot,qlotimes-qlotimes[0],qlorates[9,*],qlotimes[0], trange=anytim(time_intv,/yoh), xtitle='', xstyle=1, $
		ytitle='counts/s !C(REAR SEGMENTS)',color=2,yrange=yrng, YLOG=1-LIN, $
		charsize=charsize,xmargin=[10,2],ymargin=[1,1]
	FOR i=1,8 DO outplot,qlotimes-qlotimes[0],qlorates[i+9,*],color=i+2
	plot_label,/NOLINE,/DEV,[0.03,-1],'DETECTORS: '
	FOR i=0,8 DO plot_label,/NOLINE,/DEV,[0.03+0.02*i,-2],strn(i+1),color=i+2
ENDIF ELSE BEGIN
	IF KEYWORD_SET(POINTING) THEN BEGIN
		SAS=2
		qpo=hsi_qlook_pointing()
		qpo->set,obs_time=anytim(time_intv)
		qpdata=qpo->getdata()
		qptimes=qpo->getdata(/xaxis)
		OBJ_DESTROY,qpo
		utplot,qptimes-qptimes[0],qpdata.POINTING[0],qptimes[0],charsize=charsize,xmargin=[10,2],ymargin=[1,1],ytit='Pointing ["]',xstyle=1,yr=minmax(qpdata.POINTING),color=2,xtit=''
		outplot,qptimes-qptimes[0],qpdata.POINTING[1],qptimes[0],color=6
		plot_label,/DEV,[0.03,-1],'X',color=2
		plot_label,/DEV,[0.03,-2],'Y',color=6
		
		!P.multi=[6,1,8]
		qro=hsi_qlook_roll_period()
		qro->set,obs_time=anytim(time_intv)
		qrdata=qro->getdata()
		qrtimes=qro->getdata(/xaxis)
		OBJ_DESTROY,qro
		utplot,qrtimes-qrtimes[0],qrdata.ROLL_PERIOD,qrtimes[0],charsize=charsize,xmargin=[10,2],ymargin=[1,1],ytit='Roll period [s]',xstyle=1,yr=[3.5,4.5],xtit=''
	ENDIF ELSE BEGIN
	
;====================================================================================
;count rates
;====================================================================================
	rates_struct=oso->getdata()
	rates=rates_struct.COUNTRATE
	IF datatype(rates) EQ 'BYT' THEN BEGIN
		PRINT,".............. WARNING: looks like rates are in compressed (BYTE) form....... decompressing....."
		rates=hsi_obs_summ_decompress(rates)
	ENDIF
	times=oso->getdata(/time)
;========================
;corrected countrates ???	
IF KEYWORD_SET(CORRECTED_COUNTRATE) THEN BEGIN
	ro=OBJ_NEW('hsi_obs_summ_rate')
	ro->set,obs_time_interval=time_intv
	tmp=ro->getdata()
	rates=ro->corrected_countrate()
	OBJ_DESTROY,ro
ENDIF
;========================
;----------- below 100 keV
	maxcts=MAX(rates[0:5,*])
	IF LIN THEN yrng=[0,maxcts] ELSE yrng=[1,maxcts]
				
	utplot,times-times[0],rates[0,*],times[0], xtitle='', $
		ytitle='counts/s/detector',color=2,yrange=yrng, xstyle=1,$
		title=title,charsize=charsize,xmargin=[10,2],ymargin=[1,2],YLOG=1-LIN
	
	FOR i=1,4 DO BEGIN
		CASE i OF
			1: color=4
			2: color=5
			3: color=7
			ELSE: color=9
		ENDCASE
		outplot,times-times[0],rates[i,*], color=color	
	ENDFOR

	plot_label,/NOLINE,/DEV,[0.03,-1],'3-6 keV',color=2,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-2],'6-12 keV',color=4,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-3],'12-25 keV',color=5,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-4],'25-50 keV',color=7,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-5],'50-100 keV',color=9,charsize=charsize/2

;------------ above 100 keV OR particle rates
	!P.multi=[6,1,8]
IF NOT KEYWORD_SET(PARTICLES) THEN BEGIN
	maxcts=MAX(rates[5:8,*])
	IF LIN THEN yrng=[0,maxcts] ELSE yrng=[1,maxcts]
				
	utplot,times-times[0],rates[5,*],times[0], xtitle='', $
		ytitle='counts/s/detector',color=2,yrange=yrng, xstyle=1,$
		title='',charsize=charsize,xmargin=[10,2],ymargin=[1,1],YLOG=1-LIN
	
	FOR i=6,8 DO BEGIN
		CASE i OF
			6: color=4
			7: color=5
			ELSE: color=7
		ENDCASE
		outplot,times-times[0],rates[i,*], color=color	
	ENDFOR

	plot_label,/NOLINE,/DEV,[0.03,-1],'0.1-0.3 MeV',color=2,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-2],'0.3-0.8 MeV',color=4,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-3],'0.8-7 MeV',color=5,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-4],'7-20 MeV',color=7,charsize=charsize/2
ENDIF ELSE BEGIN
	qmro=hsi_qlook_monitor_rate(obs_time_interval=time_intv)
	qmr=qmro->getdata()
	qmrtimes=qmro->getdata(/xaxis)
	OBJ_DESTROY,qmro
	maxcts=MAX(qmr.PARTICLE_RATE) > 10
	IF LIN THEN yrng=[0,maxcts] ELSE yrng=[1,maxcts]
	utplot,qmrtimes-qmrtimes[0],qmr.PARTICLE_RATE[1],ytit='PARTICLE RATES!CCounts/s',	$
		color=3,yrange=yrng, xstyle=1, xtit='',$
		title='',charsize=charsize,xmargin=[10,2],ymargin=[1,1],YLOG=1-LIN
	outplot,qmrtimes-qmrtimes[0],qmr.PARTICLE_RATE[0],color=2
	
	plot_label,/NOLINE,/DEV,[0.03,-1],'LO channel',color=2,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-2],'HI channel',color=3,charsize=charsize/2
ENDELSE ;//if not /PARTICLES
ENDELSE
;====================================================================================
;mod variance, or GOES if keyword /GOES has been set.
;====================================================================================
IF NOT KEYWORD_SET(GOES) THEN BEGIN
	;oso->plot,class_name='mod_variance',charsize=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1,title=''
	mvtimes=oso->getdata(class_name='mod_variance',/time)
	mvdata_struct=oso->getdata(class_name='mod_variance')
	mvdata=mvdata_struct.MOD_VARIANCE
	mvinfo=oso->get(class_name='mod_variance')
	
	utplot,mvtimes-mvtimes[0],mvdata[0,*]/10.,mvtimes[0], xtitle='',ytit='Normalized!Cmodulation',tit='', xstyle=1,charsize=charsize,xmargin=[10,2],ymargin=[1,1],color=9
	outplot,mvtimes-mvtimes[0],mvdata[1,*]/10.,color=12
	
	XYOUTS,mvtimes(0.03*N_ELEMENTS(mvtimes))-mvtimes[0],0.85*!Y.CRANGE[1],'Energy band: '+strn(FIX(mvinfo.ENERGY_EDGES[0]))+'-'+strn(FIX(mvinfo.ENERGY_EDGES[1]))+' keV',charsize=charsize/2
	XYOUTS,mvtimes(0.03*N_ELEMENTS(mvtimes))-mvtimes[0],0.7*!Y.CRANGE[1],'Collimator '+strn(mvinfo.DIM1_IDS[0]),color=9,charsize=charsize/2
	XYOUTS,mvtimes(0.03*N_ELEMENTS(mvtimes))-mvtimes[0],0.55*!Y.CRANGE[1],'Collimator '+strn(mvinfo.DIM1_IDS[1]),color=12,charsize=charsize/2
ENDIF ELSE BEGIN
	pg_plotgoes,time_intv,/ylog,int=5,yticklen=1,yminor=1,color=7,yrange=[1e-8,1e-3],xstyle=1,xtitle='',xmargin=[10,2],ymargin=[1,1],charsize=charsize,thick=2,/outinfoytitle,title=''
	pg_plotgoes,time_intv,int=5,color=12,channel=2,/over 
	IF GOES GE 2 THEN BEGIN
		gev=rapp_get_gev(time_intv)
		IF datatype(gev) EQ 'STC' THEN BEGIN
			FOR i=0L,N_ELEMENTS(gev)-1 DO BEGIN
				PLOTS,[anytim(gev[i].START_TIME),anytim(gev[i].END_TIME)]-anytim(time_intv[0]),[1d-8,1d-8],/DATA,color=5,thick=3
				label_plot,/XDATA,/YDATA,anytim(gev[i].PEAK_TIME)-anytim(time_intv[0]),2d-7,gev[i].CLASS+'/'+strn(gev[i].NOAA_AR),color=5
				label_plot,/XDATA,/YDATA,anytim(gev[i].PEAK_TIME)-anytim(time_intv[0]),2d-8,strn(gev[i].LOCATION[0],format='(f10.0)')+'/'+strn(gev[i].LOCATION[1],format='(f10.0)'),color=5				
			ENDFOR
		ENDIF ELSE PRINT,'..... It seems there are no GOES EVENTS between '+anytim(time_intv[0],/ECS)+' and '+anytim(time_intv[1],/ECS)+'.'
	ENDIF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OLD STUFF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	;plot_goes,anytim(time_intv[0],/ECS),anytim(time_intv[1],/ECS),color=[4,7],/nodeftitle,xtitle='',ytitle='GOES-8 X-rays',xmargin=[10,2],ymargin=[1,1],charsize=charsize,thick=3,/three 	;/one_minute
;	rd_goes,goes_times,goes_data,trange=anytim(time_intv,/yoh)
;	IF datatype(goes_data) EQ 'UND' THEN BEGIN
;		plot,FINDGEN(100),FINDGEN(100),xtit='',ytit='',xtickname=REPLICATE(' ',10),ytickname=REPLICATE(' ',10),color=0,/NODATA, xstyle=1,xmargin=[10,2],ymargin=[2,2]
;		XYOUTS,/DATA,38,45,'Missing GOES data',charsize=charsize
;	ENDIF ELSE BEGIN
;		plotgoes,time_intv,sat=8,/ylog,int=5,yticklen=1,yminor=1,color=7,yrange=[1e-8,1e-3],xstyle=1,xtitle='',xmargin=[10,2],ymargin=[1,1],charsize=charsize,thick=2
;		plotgoes,time_intv,sat=8,int=5,color=12,channel=2,/over 
;	ENDELSE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
ENDELSE	

ENDELSE ;//if /SEGMENTS

;====================================================================================
;Flags
;====================================================================================
	!P.MULTI=[2,1,4]
	
	flagdata_struct=oso->getdata(class_name='obs_summ_flag')
	flagdata=flagdata_struct.FLAGS
	flaginfo=oso->get(class_name='obs_summ_flag')
	flagtimes=oso->getdata(class_name='obs_summ_flag',/time)

	; 'bit-like' flags:
	wantedflags=[0,1,2,11,12,16,17,14]
	IF flaginfo.flag_ids[24] EQ 'PARTICLE_FLAG' THEN wantedflags=[24,wantedflags]
;	IF flaginfo.flag_ids[26] EQ 'PARTSTORM' THEN wantedflags=[26,wantedflags]	
	IF flaginfo.flag_ids[23] EQ 'AAZ_FLAG' THEN wantedflags=[23,wantedflags]	
	IF flaginfo.flag_ids[30] EQ 'FRONTS_OFF' THEN wantedflags=[30,wantedflags]	
	IF flaginfo.flag_ids[31] EQ 'BAD_PACKETS' THEN wantedflags=[31,wantedflags]	
	i=0

	utplot,flagtimes-flagtimes[0],flagdata[wantedflags[i],*],flagtimes[0],charsiz=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1,$
		yrange=[-2,1+2*N_ELEMENTS(wantedflags)],ytickname=[' ',' ',' ',' ',' ',' ',' ',' '],ytitle='Flags',yticklen=0.00001,ystyle=1,/NODATA

	FOR i=0,N_ELEMENTS(wantedflags)-1 DO BEGIN
		fdata=flagdata(wantedflags[i],*)
		
		CASE wantedflags[i] OF
			0: color=2	;SAA
			1: color=10	;NIGHT
			2: color=5	;FLARE
			11: BEGIN 
				color=4	;TRANSMITTER
				fdata=FLOAT(fdata)/100.
			END
			12: BEGIN
				color=5	;SUNLIGHT
				fdata=FLOAT(fdata)/100.
			END			
			14: color=12	;ATTENUATOR
			16: color=9	;NONSOLAR
			17: color=2	;GAP
			23: color=6	;AAZ_FLAG
			24: color=4	;PARTICLE_FLAG
			26: color=4	;PARTSTORM
			30: color=7	;FRONTS_OFF
			31: color=2	;BAD_PACKETS
			ELSE:color=9
		ENDCASE
		outplot,flagtimes-flagtimes[0],2*i-1+fdata,flagtimes[0], color=color
		XYOUTS,/DATA,flagtimes[0.02*N_ELEMENTS(flagtimes)]-flagtimes[0],2*i-1,flaginfo.flag_ids(wantedflags[i]),color=color,charsize=charsize/2
	ENDFOR
		

!P.MULTI=[2,1,8]

IF KEYWORD_SET(SAS) THEN BEGIN
	IF SAS EQ 1 THEN BEGIN
		;ao=OBJ_NEW('psh_hsi_aspect_solution')
				ao=hsi_aspect_solution()
				ao->set,as_no_extrapol=0
		ao->set,aspect_cntl_level=5 	
		ao->set,obs_time_interval=anytim(time_intv)
		;ao->set,aspect_time_range=anytim(time_intv)	
		;as=ao->getdata(/no_range_test)
				as=ao->getdata()
		IF datatype(as) EQ 'INT' THEN BEGIN
			PRINT,'.......PROBLEM WITH SAS!.....'
			as_quality=-1
		ENDIF ELSE BEGIN
			as_qual=ao->get(/as_quality)	
			as_times=as.time * 2d^(-7)
			as_t0=hsi_sctime2any(as.t0)
			as_quality=*as_qual.triangle
		ENDELSE	
		IF N_ELEMENTS(as_quality) GT 1 THEN BEGIN
			utplot,as_times,abs(as_quality),as_t0,xstyle=1,charsize=charsize,xmargin=[10,2],ymargin=[1,1],timerange=anytim(time_intv), xtitle='', ytitle='SAS', /YLOG,yrange=[0.01,100]
			plot_label,/DEV,/NOLINE,[0.03,-1],'Size of Reduced Triangle (absolute value) [arcsec]',color=12
		ENDIF ELSE BEGIN
			PLOT,FINDGEN(100),FINDGEN(100),xtit='',ytit='',xtickname=REPLICATE(' ',10),ytickname=REPLICATE(' ',10),color=0,/NODATA, xstyle=1,xmargin=[10,2],ymargin=[2,2]
			XYOUTS,20,50,/DATA,'Problems extracting size of SAS Reduced Triangle.',charsize=charsize
		ENDELSE
		SASEND:
		IF OBJ_VALID(ao) THEN OBJ_DESTROY,ao
	ENDIF ELSE BEGIN
		qpo=hsi_qlook_pointing()
		qpo->set,obs_time=anytim(time_intv)
		qpdata=qpo->getdata()
		qptimes=qpo->getdata(/xaxis)
		OBJ_DESTROY,qpo
		utplot,qptimes-qptimes[0],qpdata.QUALITY,qptimes[0],charsize=charsize,xmargin=[10,2],ymargin=[1,1],ytit='Quality',xstyle=1,xtit=''
		;quality is sqrt of size of SAS triangle
	ENDELSE
ENDIF ELSE BEGIN
	; decimation flags:
	wantedflags=[18,19]
	IF flaginfo.flag_ids[25] EQ 'REAR_DECIMATION' THEN  wantedflags=[wantedflags,25]
	IF flaginfo.flag_ids[25] EQ 'REAR_DEC_CHAN/128' THEN  wantedflags=[wantedflags,25]
	IF flaginfo.flag_ids[29] EQ 'REAR_DEC_WEIGHT' THEN  wantedflags=[wantedflags,29]

	yrange=[1,1000]
	utplot,flagtimes-flagtimes[0],flagdata[wantedflags[0],*],flagtimes[0],charsiz=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1, color=250,$
		yrange=yrange,ytitle='DECIMATION!CChannel or weight',ystyle=1,/YLOG,/NODATA
	FOR i=0,N_ELEMENTS(wantedflags)-1 DO BEGIN
		fdata=flagdata(wantedflags[i],*)
		ligne=flaginfo.flag_ids(wantedflags[i])

		CASE wantedflags[i] OF			
			18: BEGIN
				color=7	;DECIMATION_ENERGY
				IF KEYWORD_SET(ENERGY) THEN fdata=hsi_dec_chan2en(fdata,time_intv=time_intv)
			END
			19: color=4	; DECIMATION_WEIGHT
			25: BEGIN
				color=9	; REAR_DECIMATION
				IF flaginfo.flag_ids[25] EQ 'REAR_DECIMATION' THEN BEGIN
					fdata=flagdata[21,*]+flagdata[22,*]+flagdata[25,*]
					fdata=fdata+0.5
				ENDIF
			END
			ELSE:color=6
		ENDCASE
		outplot,flagtimes-flagtimes[0],fdata,flagtimes[0], color=color
		XYOUTS,/DATA,flagtimes(0.025*N_ELEMENTS(flagtimes))-flagtimes[0],yrange[1]/(3^(i+1)),ligne,color=color,charsize=charsize/2
	ENDFOR
ENDELSE



IF NOT KEYWORD_SET(LIVETIME) THEN BEGIN	
	; other:
	wantedflags=[15]
	IF flaginfo.flag_ids[6] EQ 'FRONT_RATIO_1225' THEN wantedflags=[wantedflags,6]
	IF flaginfo.flag_ids[20] EQ 'MAX_DET_VS_TOT' THEN wantedflags=[wantedflags,20]
	yrange=[0,100]
	utplot,flagtimes-flagtimes[0],flagdata(wantedflags[0],*),flagtimes[0],charsiz=charsize,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1, color=5,$
		yrange=yrange,ytitle='Degrees or %',ystyle=1,xtickname=REPLICATE(' ',10)
	;XYOUTS,/DATA,flagtimes(0.025*N_ELEMENTS(flagtimes))-flagtimes[0],yrange[1]*2/3,flaginfo.flag_ids(wantedflags[0]),color=5,charsize=charsize/2
	plot_label,/NOLINE,/DEV,[0.03,-1],flaginfo.flag_ids(wantedflags[0]),color=5,charsize=charsize/2
	FOR i=1,N_ELEMENTS(wantedflags)-1 DO BEGIN
		fdata=flagdata(wantedflags[i],*)
		ligne=flaginfo.flag_ids(wantedflags[i])

		CASE wantedflags[i] OF			
			20: color=4	;MAX_DET_VS_TOT
			6: color=7 	;FRONT_RATIO_1225
			ELSE:color=9
		ENDCASE
		outplot,flagtimes-flagtimes[0],fdata,flagtimes[0], color=color
		;XYOUTS,/DATA,flagtimes[0.025*N_ELEMENTS(flagtimes)]-flagtimes[0],yrange[1]-(i+1)*yrange[1]/6,ligne,color=color,charsize=charsize/2
		plot_label,/NOLINE,/DEV,[0.03,-i-1],ligne,color=color,charsize=charsize/2
	ENDFOR

	ephdata_struct=oso->getdata(class_name='ephemeris')      
	ephdata=ephdata_struct.XYZ_ECI
	ephtimes=oso->getdata(class_name='ephemeris',/time)
	tmp=eci2geographic(ephdata[0:2,*],ephtimes)
	tmp=geo2mag(tmp[0:1,*])
	outplot,ephtimes-ephtimes[0],abs(tmp[0,*]), color=9
	;XYOUTS,/DATA,0.02*(ephtimes[N_ELEMENTS(ephtimes)-1]-ephtimes[0]),yrange[1]*5/6,'Absolute geomagnetic latitude',color=9,charsize=charsize/2
	;plot_label,/NOLINE,/DEV,[0.75,-1],'Absolute geomagnetic latitude',color=9,charsize=charsize/2
	label_plot,0.97,-1,/RIGHT,'Absolute geomagnetic latitude',color=9,charsize=charsize/2

ENDIF ELSE BEGIN
		mro=hsi_monitor_rate()
		mro->set,obs_time_interval=time_intv
		mr=mro->getdata()
		utbase=mro->get(/mon_ut_ref)		
		OBJ_DESTROY,mro
		
		IF N_ELEMENTS(mr) EQ 1 THEN BEGIN
			;routine returned a -1 probably...
			IF mr EQ -1 THEN BEGIN
				;PLOT nothing of interest...
				PLOT,FINDGEN(10),XTICKNAME=REPLICATE(' ',10),YTICKNAME=REPLICATE(' ',10),/NODATA,color=0
				XYOUTS,/DATA,2.5,5,'Problem extracting LIVETIME information...',charsize=charsize
				GOTO,LABEL_LIVETIME_END
			ENDIF
		ENDIF
		; average front segments of detectors 1,3,4,5,6,9:
		data=AVG(mr.LIVE_TIME[[0,2,3,4,5,8],*],0)
		IF N_ELEMENTS(LIVETIME) NE 2 THEN yrange=[0.9,1.] ELSE yrange=LIVETIME
		utplot,utbase+mr.TIME-flagtimes[0],data,/NODATA,charsiz=charsize,yrange=yrange,xmargin=[10,2],ymargin=[1,1],xtitle='', xstyle=1,	$
			xtickname=REPLICATE(' ',10), ytit='Mon. Rate LIVETIME !Cavg of D1,3,4,5,6,9'
		outplot,utbase+mr.TIME-flagtimes[0],data,color=7
		;ss=WHERE(data LT 0.95)
		;IF ss[0] NE -1 THEN outplot,utbase+mr.TIME-flagtimes[0],data,color=3,linestyle=2
		XYOUTS,/DATA,0.025*(flagtimes[N_ELEMENTS(flagtimes)-1]-flagtimes[0]),!Y.CRANGE[0]+0.22*(!Y.CRANGE[1]-!Y.CRANGE[0]),'FRONT SEGMENTS',color=7

		; average front segments of detectors 1,3,4,5,6,9:
		data=AVG(mr.LIVE_TIME[[9,11,12,13,14,17],*],0)
		outplot,utbase+mr.TIME-flagtimes[0],data,color=8
		;ss=WHERE(data LT 0.95)
		;IF ss[0] NE -1 THEN outplot,utbase+mr.TIME-flagtimes[0],data,color=2,linestyle=1
		XYOUTS,/DATA,0.025*(flagtimes[N_ELEMENTS(flagtimes)-1]-flagtimes[0]),!Y.CRANGE[0]+0.1*(!Y.CRANGE[1]-!Y.CRANGE[0]),'REAR SEGMENTS',color=8
	LABEL_LIVETIME_END:
ENDELSE		
;====================================================================================
;====================================================================================

PRINT,flaginfo.FLAG_IDS	; helps me see whenever there's any new stuff

THEEND:

IF (KEYWORD_SET(filename)) AND NOT(keyword_set(ps)) THEN BEGIN
	TVLCT,r,g,b,/GET
	write_png,filename,TVRD(),r,g,b
ENDIF

IF keyword_set(PS) THEN BEGIN
    device, /close
    set_plot, old_dev

    !X.THICK     = old_x_thick 
    !Y.THICK     = old_y_thick
    !P.CHARTHICK = old_charthick
    !P.THICK     = old_p_thick

    IF NOT(keyword_set(filename)) THEN filename='idl' 
    PRINT,'   Image written to '+filename+'.ps!'
ENDIF

;;;IF ((!D.NAME EQ 'Z') OR (!D.NAME EQ 'PS')) THEN DEVICE,/CLOSE

;some cleaning up:
!P.MULTI=0
OBJ_DESTROY,oso

END



