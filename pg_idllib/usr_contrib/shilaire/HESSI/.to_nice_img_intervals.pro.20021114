; a variation of chk_img_intervals: returns correct imaging intervals.
;



FUNCTION to_nice_img_intervals,time_intv,mindeltat=mindeltat,mincountsperdetector=mincountsperdetector,eband=eband,	$
	mostcounts=mostcounts,counts=counts		; output KEYWORDS

	IF NOT KEYWORD_SET(mindeltat) THEN mindeltat=1.5
	IF NOT KEYWORD_SET(mincountsperdetector) THEN mincountsperdetector=0.
	IF NOT KEYWORD_SET(eband) THEN eband=2	;12-25 keV	; eband=[1,2,3] for 6-50 keV
	
	oso=OBJ_NEW('hsi_obs_summary')
;-------------------------------------------------------------------------------------------------
	es=0
	CATCH,es
	IF es NE 0 THEN BEGIN
		PRINT,'...............................CAUGHT ERROR !......................'
		HELP, CALLS=caller_stack
                PRINT, 'Error index: ', es
                PRINT, 'Error message:', !ERR_STRING
                PRINT,'Error caller stack:',caller_stack
		PRINT,'...................................................................'
		OBJ_DESTROY,oso
		RETURN,time_intv
	ENDIF
;-------------------------------------------------------------------------------------------------
	oso->set,obs_time_interval=time_intv

	rates_struct=oso->getdata()
	rates=rates_struct.COUNTRATE
	IF datatype(rates) EQ 'BYT' THEN BEGIN
		PRINT,'.............oups! A screw up (again!): apparently, I need to decompress those #%$@ rates.... decompressing now....'
		rates=hsi_obs_summ_decompress(rates_struct.COUNTRATE)
	ENDIF
	times=oso->getdata(/time)
	info=oso->get(class_name='hsi_obs_summ_rate')
	flagdata_struct=oso->getdata(class_name='obs_summ_flag')
	flagdata=flagdata_struct.FLAGS
	flaginfo=oso->get(class_name='obs_summ_flag')
	flagtimes=oso->getdata(class_name='obs_summ_flag',/time)
	OBJ_DESTROY,oso
	
	changeflags=[14,18,19]
	presenceflags=[0,1,17]

	;FIRST: subdivide everything in proper intervals
	subdivisionsflags=[changeflags,presenceflags]

	intvtim=anytim(time_intv)
	n_intv=N_ELEMENTS(flagtimes)	
	div_ss=[0,n_intv-1]
	
	ss_tot=-1
	FOR i=0,N_ELEMENTS(subdivisionsflags)-1 DO BEGIN
		ss=get_ss_changes(flagdata[subdivisionsflags[i],*])
		IF ss[0] NE -1 THEN BEGIN
			IF ss_tot[0] EQ -1 THEN ss_tot=ss ELSE ss_tot=[ss_tot,ss]
		ENDIF
	ENDFOR
	ss=ss_tot[UNIQ(ss_tot, SORT(ss_tot))]
	IF ss[0] NE -1 THEN div_ss=[0,ss,n_intv-1]

	;ss is an array containing all change indices
	;div_ss is an array containing all division indices

	;SECOND, get a list of good intervals
	valid_intv_ss=-1
	n_div=N_ELEMENTS(div_ss)
	mostcounts=0
	counts='nil'
	highestcounts=-1
	FOR i=0,n_div-2 DO BEGIN
		GOODINTV=1
				
		;1/ I don't want 'presence' dt:
		FOR j=0,N_ELEMENTS(presenceflags)-1 DO BEGIN
			IF flagdata[presenceflags[j],div_ss[i]+1] NE 0 THEN GOODINTV=0
		ENDFOR
		
		;2/ I don't want dt less than mindeltat:
		IF (flagtimes[div_ss[i+1]]-flagtimes[div_ss[i]]-flaginfo.time_intv) LT mindeltat THEN GOODINTV=0
		
		;3/ I want total counts in time interval in energyband 'eband' to be above 'mincountsperdetector'
		totnbrcts=0D
		FOR j=0,N_ELEMENTS(eband)-1 DO BEGIN
			totnbrcts=totnbrcts+TOTAL(rates[eband[j],div_ss[i]:div_ss[i+1]])
		ENDFOR
		totnbrcts=totnbrcts*info.time_intv
PRINT,'........'+anytim(/ECS,flagtimes[div_ss[i]])+' to '+anytim(/ECS,flagtimes[div_ss[i+1]])+'  cts='+strn(totnbrcts)  
		IF totnbrcts LT mincountsperdetector THEN GOODINTV=0
		
		;the rest...
		IF GOODINTV EQ 1 THEN BEGIN 
			IF valid_intv_ss[0] EQ -1 THEN valid_intv_ss=i ELSE valid_intv_ss=[valid_intv_ss,i]
			IF datatype(counts) EQ 'STR' THEN counts=totnbrcts ELSE counts=[counts,totnbrcts]
			IF totnbrcts GT highestcounts THEN BEGIN
				highestcounts=totnbrcts
				mostcounts=N_ELEMENTS(valid_intv_ss)-1
			ENDIF
		ENDIF
	ENDFOR

	IF valid_intv_ss[0] EQ -1 THEN RETURN,'None'

	;THIRD: construct a start intv_ss and end_intv_ss with only valid intervals:
	start_intv_ss=div_ss[valid_intv_ss[0]]
	end_intv_ss=div_ss[valid_intv_ss[0]+1]
	FOR i=1,N_ELEMENTS(valid_intv_ss)-1 DO BEGIN
		start_intv_ss=[start_intv_ss,div_ss[valid_intv_ss[i]]]
		end_intv_ss=[end_intv_ss,div_ss[valid_intv_ss[i]+1]]
	ENDFOR

	;FOURTH: construct anytim array with new_intv_ss:
		starttimes=flagtimes[start_intv_ss]
		endtimes=flagtimes[end_intv_ss]
	

	newintv=TRANSPOSE([[starttimes],[endtimes]])
	;newintv = newintv[UNIQ(newintv, SORT(newintv))]
	;; starttimes shifted right	
	newintv[0,*]=newintv[0,*]+flaginfo.time_intv
	IF (newintv[0,0]-flaginfo.time_intv EQ anytim(time_intv[0])) THEN newintv[0,0]=anytim(time_intv[0])
	RETURN,newintv
END



