;list2images : takes a .list with dates, converts them, and makes spectrograms (I & V)
;called by the UNIX batch file 'ragbursts2images'
;
;***************  P. Saint-Hilaire 2001/09/29 created   ********************************
;			shilaire@astro.phys.ethz.ch OR psainth@hotmail.com
;---------------------------------------------------------------------------------------

;**************************************************************************************************************************
; First, some useful routines from Andre Csillaghy....*********************************************************************
;**************************************************************************************************************************
PRO Merge, im1, im2, xAxis1, xAxis2, yAxis1, yAxis2, $
	im, xAxis, yAxis, ADJUST = adjust

  nx1 = N_Elements( xAxis1 ) & nx2 = N_Elements( xAxis2 )
  ny1 = N_Elements( yAxis1 ) & ny2 = N_Elements( yAxis2 )

  IF nx1 GT nx2 THEN BEGIN
    xAxis = xAxis1
    nxBoth = nx1
    IF Keyword_Set( ADJUST ) THEN $
      im2 = ConGrid1D( im2, nxBoth, ny2 ) 
  ENDIF ELSE  BEGIN
    xAxis = xAxis2
    nxBoth = nx2
    IF Keyword_Set( ADJUST)  THEN $
      im1 = ConGrid1D( im1, nxBoth, ny1 )
  ENDELSE

  yAxis = [ yAxis1, yAxis2 ]
  nyBoth = ny1 + ny2

  im = FltArr( nxBoth, nyBoth )
  im(0, 0) = im1
  im(0, ny1) = im2

END ; Merge images  

;******************************************************************************
PRO qv_backsub, image
 print, "Background subtraction"
 ;image = constbacksub_V21(image, 0, n_elements(image(*,0))-1,'X', /AUTO )
 image = constbacksub_V21(image, 0,299,'X')	; first 30 secs of constant backgnd, assuming 0.1 sec per time bin
END
;******************************************************************************
PRO qv_elimwrong, image, xaxis, yaxis 
 print, "Eliminating wrong channels"
 image_old = image
 xaxis_old = xaxis
 yaxis_old = yaxis
 ElimWrongChannels, image, xaxis, yaxis
 if n_elements(image(0,*)) le 1 then begin 
    print, "Restoring original image"
    image = image_old
    xaxis = xaxis_old
    yaxis = yaxis_old
 endif
END



;***********************************************************************************************************************
;**************************************************************************************************************************
;**********************   Now, routines by PSH.... ************************************************************************
;**************************************************************************************************************************
;**************************************************************************************************************************


;******************************************************************************
PRO write_add_info,STOKES=STOKES,DATE=DATE,datalimits=datalimits

CharSize=1.0

XYOUTS,/dev,580,493,'ETH Zurich',CHARSIZE=CharSize
XYOUTS,/dev,580,478,'Switzerland',CHARSIZE=CharSize
XYOUTS,/dev,580,463,'Phoenix-2 spectrometer',CHARSIZE=CharSize

XYOUTS,/dev,740,2,'UT'
XYOUTS,/dev,10,195,'Frequency [MHz]',ORIENTATION=90

IF exist(DATE) THEN XYOUTS,/dev,60,490,DATE,CHARSIZE=CharSize*1.5
IF exist(STOKES) THEN BEGIN
	XYOUTS,/dev,75,460,'STOKES '+STOKES,CHARSIZE=CharSize*1.5
	IF STOKES EQ 'I' THEN BEGIN
		IF not exist(datalimits) THEN BEGIN
			XYOUTS,/dev,220,458,'MIN.',CHARSIZE=CharSize*0.85
			XYOUTS,/dev,520,458,'MAX.',CHARSIZE=CharSize*0.85
		ENDIF ELSE BEGIN
			XYOUTS,/dev,330,458,'SFUs (log scale)',CHARSIZE=CharSize*0.85
			temp=datalimits		;conversion already done	;10^(datalimits/45.) -10.	; convert to SFUs
			XYOUTS,/dev,220,458,STRN(temp(0),format='(f7.1)'),CHARSIZE=CharSize*0.85
			XYOUTS,/dev,520,458,STRN(temp(1),format='(f7.1)'),CHARSIZE=CharSize*0.85
		ENDELSE
	ENDIF
	IF STOKES EQ 'V' THEN BEGIN
		IF not exist(datalimits) THEN BEGIN
			XYOUTS,/dev,220,458,'LEFT',CHARSIZE=CharSize*0.85
			XYOUTS,/dev,520,458,'RIGHT',CHARSIZE=CharSize*0.85
		ENDIF ELSE BEGIN
			XYOUTS,/dev,290,458,'% POLARIZATION (NEGATIVE = LEFT)',CHARSIZE=CharSize*0.85
			XYOUTS,/dev,220,458,STRN(datalimits(0),format='(f7.1)'),CHARSIZE=CharSize*0.85
			XYOUTS,/dev,520,458,STRN(datalimits(1),format='(f7.1)'),CHARSIZE=CharSize*0.85
		ENDELSE


	ENDIF	
ENDIF

END
;******************************************************************************

;******************************************************************************
FUNCTION return_time_interval_of_ragfile,ragfile
; this function is valid until the year 7000... :)
; ragfile can have a path
; RESTRICTIONS : I assume duration is 15 minutes... not always true !!!!!!!!

lastslashpos=STRPOS(ragfile,'/',/REVERSE_SEARCH)
basicfilename=STRMID(ragfile,lastslashpos+1)

;if basicfilename starts by 7,8, or 9 it means I have to add 19 in front for the time...
timename=basicfilename
firstchar=STRMID(timename,0,1)
if ((firstchar eq '7') OR (firstchar eq '8') OR (firstchar eq '9')) then timename='19'+timename

time_part=STRMID(timename,8)
time_part='_'+time_part
STRPUT,timename,time_part,8
timeintv=file2time(timename,out_style='ECS')
timeintv=anytim(timeintv)
timeintv=[timeintv,timeintv+15.*60.]	; OK, here I assume the duration is 15 minutes.
RETURN,anytim(timeintv,/ECS)
END
;******************************************************************************
;******************************************************************************
FUNCTION return_rag_files,time_interval,valid_file_identifiers=valid_file_identifiers
; this function should work for any rag fits after 1978 (excl.)
if not exist(valid_file_identifiers) then valid_file_identifiers=['*l1.fit.gz','*i.fit.gz','*p.fit.gz']	;this thing should always have at least one element !

time_interval=anytim(time_interval)

;some constants
dir_time_interval=3600.*24.	;	the lowest possible directory levels are 1 day long
rag_root='/global/helene/local/rag/observations/'

;initialize output
ragfile=-1

;get the list of absolute directory paths to be checked (chronological)
dirlist=-1
currentdatetime=time_interval(0)
enddatetime=time_interval(1)
while (currentdatetime le enddatetime) do begin
	bla=anytim(currentdatetime,/EX)
	bla=rag_root+int2str(bla(6),4)+'/'+int2str(bla(5),2)+'/'+int2str(bla(4),2)+'/'
	if datatype(dirlist) eq 'INT' then dirlist=bla else dirlist=[dirlist,bla]
	currentdatetime=currentdatetime+dir_time_interval
endwhile

if datatype(dirlist) eq 'INT' then return,-1	;

;now, for EACH directory in dirlist, get filelist, and check if within time_interval
filelist=-1
for i=0,n_elements(dirlist)-1 do begin
	bla=findfile(dirlist(i)+'*')

	; now, for each filename in bla, check if ends with correct possible identifiers,
	; and append to filelist

	for j=0,n_elements(valid_file_identifiers)-1 do begin
		temp=WHERE(STRMATCH(bla,valid_file_identifiers(j),/FOLD_CASE) eq 1)
		if temp(0) ne -1 then begin
			temp=bla(temp)
			if datatype(filelist) eq 'INT' then filelist=temp else filelist=[filelist,temp]
		endif
	endfor
endfor

; now, check which ones are in the correct time interval, and return them...
if datatype(filelist) eq 'INT' then RETURN,-1
	
for i=0,n_elements(filelist)-1 do begin
	if has_overlap(time_interval,anytim(return_time_interval_of_ragfile(filelist(i)))) then begin
		if datatype(ragfile) eq 'INT' then ragfile=filelist(i) ELSE ragfile=[ragfile,filelist(i)]
	endif
endfor
return,ragfile
END
;******************************************************************************



;******************************************************************************
FUNCTION rag_extract_from_list,file,addtime=addtime
	;some initialization
	list=-1
	ligne='abc'
	if not exist(addtime) then addtime=30.	; time added at both extremities of time interval
	addtime=FLOAT(addtime)
		
	IF not file_exist(file) then print,'!!!!!!!!! NEW BURSTS FILE LIST WAS NOT FOUND : '+file+' !!!!!!!!!!!!!!' ELSE begin
		OPENR,lun1,file,/GET_LUN
		readf,lun1,ligne
		IF ligne EQ 'There are new bursts to image:' then begin		
			WHILE eof(lun1) EQ 0 do begin
				readf,lun1,ligne
				bla=RSI_STRSPLIT(ligne,/EXTRACT)
				IF n_elements(bla) GT 1 then begin	;happens I don't have a burst for the whole day...
			    	temp=STRMID(bla(0),0,2) & temp=FIX(temp)
					IF temp GE 0 then year=STRN(2000+temp) ELSE year=STRN(1900+temp)
					temp=STRMID(bla(0),2,2) & temp=FIX(temp)
					month=STRN(temp)
					temp=STRMID(bla(0),4,2) & temp=FIX(temp)
					day=STRN(temp)
					starttime=3600.*DOUBLE(STRMID(bla(1),0,2))+60.*DOUBLE(STRMID(bla(1),2))
					endtime=3600.*DOUBLE(STRMID(bla(2),0,2))+60.*DOUBLE(STRMID(bla(2),2))
					
					newitem=year+'/'+month+'/'+day+' '+ms2hms([starttime-addtime,endtime+addtime]*1000.)
					if datatype(list) EQ 'INT' then list=newitem else list=[list,newitem]
				ENDIF
			ENDWHILE
		ENDIF
		CLOSE,lun1,/FORCE
	ENDELSE
	return,list
END



;***********************************************************************************************************************************
;***********************************************************************************************************************************
;***********************************  MAIN  ****************************************************************************************
;***********************************************************************************************************************************
;***********************************************************************************************************************************

;first, some important constants:

LOGBACKSUB=1	; set to 1 for backgnd subtraction on log image,
				; set to 0 for backgnd subtraction on linear image (most realistic one)
				; this one of course only concerns STOKES I images.
INVERT=0		; set this to 0 to constbacksub, THEN elimwrongchannels
				; set this to 1 to elimwrongchannels. THEN constbacksub
addtime = 30.   ;seconds before and after burst times, to serve as background


!QUIET=1

; now, let's rock'n'roll !
;***********************************************************************************************************************************
SET_PLOT, 'Z', /COPY
DEVICE, SET_RESOLUTION=[768,512]
ERASE

;the following line is done so that ticks appear in the images (not needed with PS device) - a bug I never figured out in show_image...
plot,[0,1],[2,3]

addtime=FLOAT(addtime)
print,'.......................Extracting bursts time intervals from the list.'
intervallist = rag_extract_from_list(getenv('LOG_DIR')+'/newragbursts.list',addtime=addtime)	;in ANYTIM format...
IF datatype(intervallist) EQ 'INT' then begin
	print,'!!!!!!!!!!!!!! NO NEW BURSTS !!!!!!!!!!!!!!!!!!'
	EXIT,/NO_CONFIRM
ENDIF
nbursts=N_ELEMENTS(intervallist)/2

print,'.......................Number of new bursts: '+STRING(nbursts)

FOR i=0,nbursts-1 do begin
	time_interval=[intervallist(2*i),intervallist(2*i+1)]
	print,'............... Doing burst : ',time_interval
	;do l1 and i files (Linear polarization or STOKES I)-----------------------------------------------------------------------------------------
	ragfiles=return_rag_files(time_interval,valid_file_identifiers=['*l1.fit*','*i.fit*'])
	loadct,1	;BLUE-WHITE
	tvlct,r,g,b,/GET
	
	nb_files=N_ELEMENTS(ragfiles)
	IF nb_files EQ 0 THEN PRINT,'......................No intensity rag fits files for this burst!' $
	ELSE begin
		ragfitsread,ragfiles(0),image,xaxis,yaxis,/SILENT
		IF nb_files GT 1 THEN begin
			FOR j=1,nb_files-1 DO begin
				ragfitsread,ragfiles(j),img,xax,yax,/SILENT
				Merge, Transpose(image), Transpose(img), $
					yaxis, yax, xaxis, xax, $
					newimage, newyaxis, newxaxis,/ADJUST 
				image = Transpose(newimage)
				xaxis=newxaxis
				yaxis=newyaxis
			ENDFOR
		ENDIF

		;take the parts starting and ending at correct times +/- addtimes?
		ss_start=WHERE(xaxis GT (anytim(time_interval(0),/time_only)))
		ss_start=ss_start(0)
		ss_end=WHERE(xaxis GT (anytim(time_interval(1),/time_only)))
		ss_end=ss_end(0)
		
		image=image(ss_start:ss_end,*)	; take only burst +/- addtime secs.
		print,'Raw image +/- addtime :'
		print,'MIN: '+STRING(min(image))
		print,'MMAX: '+STRING(max(image))
	
		IF LOGBACKSUB EQ 0 THEN BEGIN
			image = 10^(image/45.) - 10.		; so we're with a linear image in SFUs
			print,'Linearized :'
			print,'MIN: '+STRING(min(image))
			print,'MAX: '+STRING(max(image))	
		ENDIF
		
		ERASE

		IF INVERT EQ 0 THEN BEGIN
			qv_backsub, image
			qv_elimwrong, image, xaxis, yaxis
		ENDIF ELSE BEGIN
			qv_elimwrong, image, xaxis, yaxis
			qv_backsub, image
		ENDELSE
				
		datamin = min(image)
		datamax = max(image)
		print,'After background subtraction, bad channels removal and taking only relevant part of image (near burst itself):'
		print,'MIN: '+STRING(datamin)
		print,'MAX: '+STRING(datamax)

		IF LOGBACKSUB EQ 0 THEN BEGIN
			image=alog(TEMPORARY(image)-datamin+1.)	;for display purposes, I'd rather have a log scale...
			print,' After putting things back into a log scale:'
			print,'LOG MIN: '+STRING(min(image))
			print,'LOG MAX: '+STRING(max(image))
		ENDIF 
		
		ERASE
		z_show_image,image,xaxis(ss_start:ss_end),yaxis,/hms,imageoffset=0, $
			XPOS=70,YPOS=35,xsize=768,ysize=512
		IF LOGBACKSUB EQ 0 THEN write_add_info,STOKES='I',DATE=ANYTIM(time_interval(0),/ECS,/DATE_ONLY),datalimits=[datamin,datamax] $
		ELSE write_add_info,STOKES='I',DATE=ANYTIM(time_interval(0),/ECS,/DATE_ONLY)
		img=tvrd(ORDER=0)
		temp = ANYTIM(time_interval(0),/EX)
		year = temp(6)
		write_gif,getlog('IMAGE_DIR')+STRN(year)+'/Phoenix-2_'+time2file(time_interval(0)+addtime,/seconds)+'_I.gif',img,r,g,b			
	ENDELSE
		



	;do p files	(STOKES V)-----------------------------------------------------------------------------------------
	ragfiles=return_rag_files(time_interval,valid_file_identifiers='*p.fit*')
	loadct,6	;PRISM color table
	tvlct,r,g,b,/GET
		r(255)=255
		g(255)=255
		b(255)=255
		tvlct,r,g,b

	nb_files=N_ELEMENTS(ragfiles)	
	IF nb_files EQ 0 THEN PRINT,'......................No polarisation rag fits files for this burst!' $
	ELSE begin
		ragfitsread,ragfiles(0),image,xaxis,yaxis,/SILENT
		IF nb_files GT 1 THEN begin
			FOR j=1,nb_files-1 DO begin
				ragfitsread,ragfiles(j),img,xax,yax,/SILENT
				Merge, Transpose(image), Transpose(img), $
					yaxis, yax, xaxis, xax, $
					newimage, newyaxis, newxaxis,/ADJUST 
				image = Transpose(newimage)
				xaxis=newxaxis
				yaxis=newyaxis
			ENDFOR
		ENDIF	

		;take the parts starting and ending at correct times +/- addtimes?
		ss_start=WHERE(xaxis GT (anytim(time_interval(0),/time_only)))
		ss_start=ss_start(0)
		ss_end=WHERE(xaxis GT (anytim(time_interval(1),/time_only)))
		ss_end=ss_end(0)
		
		image=image(ss_start:ss_end,*)	; take only burst +/- addtime secs.
		print,'Raw image +/- addtime :'
		print,'MIN: '+STRING(min(image))
		print,'MMAX: '+STRING(max(image))

		ERASE

		IF INVERT EQ 0 THEN BEGIN
			qv_backsub, image
			qv_elimwrong, image, xaxis, yaxis
		ENDIF ELSE BEGIN
			qv_elimwrong, image, xaxis, yaxis
			qv_backsub, image
		ENDELSE
		
		datamin = min(image)	; this is in %polarization (negative = left)
		datamax = max(image)	; this is in %polarization (negative = left)
				
		ERASE
		z_show_image,image,xaxis(ss_start:ss_end),yaxis,/hms,imageoffset=0,$
			XPOS=70,YPOS=35,xsize=768,ysize=512
		write_add_info,STOKES='V',DATE=ANYTIM(time_interval(0),/ECS,/DATE_ONLY),datalimits=[datamin,datamax]
		img=tvrd(ORDER=0)
		temp = ANYTIM(time_interval(0),/EX)
		year = temp(6)		
		write_gif,getlog('IMAGE_DIR')+STRN(year)+'/Phoenix-2_'+time2file(time_interval(0)+addtime,/seconds)+'_V.gif',img,r,g,b					
	ENDELSE	

ENDFOR

DEVICE, /CLOSE 

print,'.............. FINISHED WITHOUT BREAK ERRORS................'
print,'IDL-OK'
END




