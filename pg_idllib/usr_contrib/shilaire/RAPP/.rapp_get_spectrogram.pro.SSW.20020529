;+
;NAME:
; 	rapp_get_spectrogram.pro
;PROJECT:
; 	ETHZ Radio Astronomy
;CATEGORY:
; 	Utility
;PURPOSE:
; This routine, given a time interval (anytim format) and a frequency interval (optional),
; returns the associated Phoenix data array, or a string if a problem occured (such as
; no data available). The intensity data is returned as SFU values, unless
; the /POL keyword is used, in which case the values are in % polarization 
; (negative=left).
;
;
;CALLING SEQUENCE:
; rapp_get_spectrogram,time_interval,freq_interval,ELIM=ELIM,BACK=BACK,POL=POL, $
;			xaxis=xaxis,yaxis=yaxis
;
;INPUT:
; time_interval : a 2-element array,in a format accepted by ANYTIM
;
;OPTIONAL INPUT:
; freq_interval : a 2-element int array (MHz). If not specified, the whole 
;				frequency range is returned.
;
;KEYWORD INPUT:
;	/ELIM: if set, will automatically remove bad channels
;	/BACK: if set, will automatically remove background
;	/POL : if set, will look for polarization data instead of intensity/L1/L2	
;	/DESPIKE : if set, will use tracedespike.pro (from the TRACE part of the SSW) on the spectrogram. CAUTION: radio 'spikes' would surely be removed...
;
;
;OUTPUT:
; a Phoenix-2 spectrogram image, in LINEAR SFU scale (for intensities) or % circular polarization (negative = left)
;
;KEYWORD OUTPUT:
;	xaxis : returns the xaxis, as per RagFitsRead.pro
;	yaxis : returns the yaxis, as per RagFitsRead.pro
;	/LOG  : if set, will output 45*alog( (data > (-9.)) +10.)
;
;CALLS
;	has_overlap.pro
;	int2str.pro
;	event. tracedespike.pro
;
;RESTRICTIONS:
;	For now, only works inside ETH (because of file locations)
;
;EXAMPLES:
;	time_intv='2001/09/01 '+['11:50:00','11:55:00']
;	data=rapp_get_spectrogram(time_intv,xaxis=xaxis,yaxis=yaxis,/ELIM,/BACK)
;
;	time_intv='2001/09/20 '+['11:35:00','11:36:00']
;	data=rapp_get_spectrogram(time_intv,xaxis=xaxis,yaxis=yaxis,/POL)
;
;
;HISTORY:
;	Pascal Saint-Hilaire, 2001/11/16 created
;		shilaire@astro.phys.ethz.ch
;	PSH 2002/01/21: corrected a bug where a break error occured if no data files were found.
;			Now, simply returns -1 if a problem occured
;
;	PSH 2002/01/28: returns a STRING if something went wrong, instead of -1. This string 
;					usually contains an error message.
;
;	PSH 2002/01/28: major changes, renamed from rapp_get_array to rapp_get_spectrogram
;		and included most of the called subroutines (some of them heavily inspired by 
;		previous work from A. Csillaghy and/or P. Messmer)
;	
;	PSH 2002/05/03: Phoenix file duration is no longer always assumed to be 15 min...
;	PSH 2002/05/04: Added /DESPIKE keyword
;			Added /LOG keyword
;
;-

;==============================================================================================
FUNCTION rapp_return_file_interval,ragfile

	ragfitsread,ragfile,dateobs=dateobs,timeobs=timeobs,dateend=dateend,timeend=timeend,/SILENT
	timeintv=[dateobs+' '+timeobs,dateend+' '+timeend]
	
RETURN,anytim(timeintv,/ECS)
END

;===================================================================================================================================================================================================================
FUNCTION rapp_get_file_list,time_intv, valid_file_identifiers=valid_file_identifiers
; this function should work for any rag fits after 1978 (excl.)
if not exist(valid_file_identifiers) then valid_file_identifiers=['*l1.fit.gz','*l2.fit.gz','*i.fit.gz','*p.fit.gz']
	; OK, I did not include the 'd' and 's' ones... as they were used only the first two days or so...

time_interval=anytim(time_intv)

;some constants
dir_time_interval=3600.*24.	;	the lowest possible directory levels are 1 day long
IF anytim(time_interval(0),/date) GT anytim('2002/01/01') THEN rag_root='/global/helene/local/rag/observations/' ELSE rag_root='/global/hercules/data1/rag/observations/'

;initialize output
ragfile=-1

;get the list of absolute directory paths to be checked (chronological)
dirlist=-1
currentdatetime=time_interval(0)
enddatetime=time_interval(1)
while (currentdatetime le enddatetime) do begin
	bla=anytim(currentdatetime,/EX)
	bla=rag_root+int2str(bla(6),4)+'/'+int2str(bla(5),2)+'/'+int2str(bla(4),2)+'/'
	if datatype(dirlist) eq 'INT' then dirlist=bla else dirlist=[dirlist,bla]
	currentdatetime=currentdatetime+dir_time_interval
endwhile

if datatype(dirlist) eq 'INT' then return,-1

;now, for EACH directory in dirlist, get filelist
filelist=-1
for i=0,n_elements(dirlist)-1 do begin
	bla=findfile(dirlist(i)+'*')

	; now, for each filename in bla, check if ends with correct possible identifiers,
	; and append to filelist

	for j=0,n_elements(valid_file_identifiers)-1 do begin
		temp=WHERE(STRMATCH(bla,valid_file_identifiers(j),/FOLD_CASE) eq 1)
		if temp(0) ne -1 then begin
			temp=bla(temp)
			if datatype(filelist) eq 'INT' then filelist=temp else filelist=[filelist,temp]
		endif
	endfor
endfor

; now, check which ones are in the correct time interval, and return them...
if datatype(filelist) eq 'INT' then RETURN,-1

for i=0,n_elements(filelist)-1 do begin
	if has_overlap(time_interval,anytim(rapp_return_file_interval(filelist(i)))) then begin
		if datatype(ragfile) eq 'INT' then ragfile=filelist(i) ELSE ragfile=[ragfile,filelist(i)]
	endif
endfor

return,ragfile
END
;===================================================================================================================================================================================================================
PRO rapp_elimwrong, image, xaxis, yaxis 
 print, "Eliminating wrong channels"
 image_old = image
 xaxis_old = xaxis
 yaxis_old = yaxis
 ElimWrongChannels, image, xaxis, yaxis
 if n_elements(image(0,*)) le 1 then begin 
    print, "Restoring original image"
    image = image_old
    xaxis = xaxis_old
    yaxis = yaxis_old
 endif
END
;===================================================================================================================================================================================================================
PRO rapp_merge, im1, im2, xAxis1, xAxis2, yAxis1, yAxis2, $
	im, xAxis, yAxis, ADJUST = adjust

  nx1 = N_Elements( xAxis1 ) & nx2 = N_Elements( xAxis2 )
  ny1 = N_Elements( yAxis1 ) & ny2 = N_Elements( yAxis2 )

  IF nx1 GT nx2 THEN BEGIN
    xAxis = xAxis1
    nxBoth = nx1
    IF Keyword_Set( ADJUST ) THEN $
      im2 = ConGrid1D( im2, nxBoth, ny2 ) 
  ENDIF ELSE  BEGIN
    xAxis = xAxis2
    nxBoth = nx2
    IF Keyword_Set( ADJUST)  THEN $
      im1 = ConGrid1D( im1, nxBoth, ny1 )
  ENDELSE

  yAxis = [ yAxis1, yAxis2 ]
  nyBoth = ny1 + ny2

  im = FltArr( nxBoth, nyBoth )
  im(0, 0) = im1
  im(0, ny1) = im2

END ; Merge images  
;===================================================================================================================================================================================================================
PRO rapp_backsub, image, xaxis, AbsoluteAnyStartTime, BACKGROUNDTIME, backavg=backavg, automatic=automatic

 IF NOT exist(automatic) THEN automatic=0.
 
 print, "Background subtraction"

IF automatic EQ 0. THEN BEGIN
	ss_startbackgnd=WHERE(xaxis GT AbsoluteAnyStartTime)
	ss_startbackgnd=ss_startbackgnd(0)
	ss_endbckgnd=WHERE(xaxis GT (AbsoluteAnyStartTime+BACKGROUNDTIME))
	ss_endbckgnd=ss_endbckgnd(0)
	image = constbacksub_v21(image, ss_startbackgnd,ss_endbckgnd ,'X', background=background)
		; backavg is the average of the background that was subtracted from 'image'. 
		; For background subtraction done on a log image, it is a measure of the basic
		; quantity  one must add to 'image' before linearization, in order to have
		; real physical units (i.e. SFUs).
		; I can think of a couple really better ways to obtain the min/max values (in SFUs),
		; but they are both time (my own)-consuming and computer-intensive. Maybe later ?
ENDIF ELSE BEGIN
	image = constbacksub_v21(image, 0, n_elements(image(*,0))-1,'X', automatic=automatic, background=background )
ENDELSE
backavg = avg(background,0)
END
;===================================================================================================================================================================================================================
;===================================================================================================================================================================================================================
FUNCTION rapp_get_spectrogram,time_intv, freq_intv, ELIM=ELIM, BACK=BACK, POL=POL, DESPIKE=DESPIKE,	$	;INPUT KEYWORDS
						xaxis=xaxis, yaxis=yaxis,LOG=LOG				;OUTPUT KEYWORDS
	
	IF KEYWORD_SET(POL) THEN ragfiles=rapp_get_file_list(time_intv,valid_file_identifiers='*p.fit*') ELSE ragfiles=rapp_get_file_list(time_intv,valid_file_identifiers=['*l1.fit*','*l2.fit*','*i.fit*'])
	IF datatype(ragfiles) EQ 'INT' THEN RETURN,'No fits data'
	nb_files=N_ELEMENTS(ragfiles)
	ragfitsread,ragfiles(0),image,xaxis,yaxis,/SILENT,bunit=bunit
			CASE bunit OF
				'solar flux units (sfu)': PRINT,bunit
				'45*ln10(solar flux units (sfu) + 10)': BEGIN
					image=10^(image/45.) - 10
					PRINT,'Decompressing '+bunit
				END
				'45*alog(solar flux units (sfu)+10)': BEGIN
					image=exp((image/45.)) - 10
					PRINT,'Decompressing '+bunit
				END						
				'% polarization (negative = left)': PRINT,bunit
				ELSE: BEGIN
					PRINT,'......................The encoding format: "'+bunit+'" is NOT recognized!!!'
					RETURN,'Encoding not recognized'
				END
			ENDCASE										
			IF nb_files GT 1 THEN begin
				FOR j=1,nb_files-1 DO begin
					ragfitsread,ragfiles(j),img,xax,yax,/SILENT,bunit=bunit
					CASE bunit OF
						'solar flux units (sfu)': PRINT,bunit
						'45*ln10(solar flux units (sfu) + 10)': BEGIN
							img=10^(img/45.) - 10
							PRINT,'Decompressing '+bunit
						END
						'45*alog(solar flux units (sfu)+10)': BEGIN
							img=exp((img/45.)) - 10
							PRINT,'Decompressing '+bunit
						END						
						'% polarization (negative = left)': PRINT,bunit
						ELSE: BEGIN
							PRINT,'......................The encoding format: "'+bunit+'" is NOT recognized!!!'
							RETURN,'Encoding not recognized'
						END
					ENDCASE										
					rapp_merge, Transpose(image), Transpose(img), $
						yaxis, yax, xaxis, xax, $
						newimage, newyaxis, newxaxis,/ADJUST 
					image = Transpose(newimage)
					xaxis=newxaxis
					yaxis=newyaxis
				ENDFOR
			ENDIF
	
	;at this point, image is always an image in LINEAR SFU SCALE (or % polarization, for polarization files) !!!
	
	IF KEYWORD_SET(ELIM) THEN rapp_elimwrong, image, xaxis, yaxis
	
	IF KEYWORD_SET(BACK) THEN rapp_backsub, image, xaxis, automatic=0.03
		
	IF KEYWORD_SET(DESPIKE) THEN image=tracedespike(image)

	ss_start=WHERE(xaxis GE (anytim(time_intv(0),/time_only)))	
	IF ss_start(0) EQ -1 THEN ss_start=0  ELSE ss_start=ss_start(0)
	ss_end=WHERE(xaxis LT (anytim(time_intv(1),/time_only)))
	IF ss_end(0) EQ -1 THEN ss_end=N_ELEMENTS(xaxis)-1 ELSE ss_end=ss_end(N_ELEMENTS(ss_end)-1)
	image=image(ss_start:ss_end,*)
	xaxis=xaxis(ss_start:ss_end)		

	IF EXIST(freq_intv) THEN BEGIN	
		ss_start=WHERE(yaxis LE freq_intv(1))
		IF ss_start(0) EQ -1 THEN ss_start=0  ELSE ss_start=ss_start(0)
		ss_end=WHERE(yaxis LE freq_intv(0))
		IF ss_end(0) EQ -1 THEN ss_end=N_ELEMENTS(xaxis)-1 ELSE ss_end=ss_end(N_ELEMENTS(ss_end)-1)
		image=image(*,ss_start:ss_end)
		yaxis=yaxis(ss_start:ss_end)
	ENDIF
	
	IF KEYWORD_SET(LOG) THEN image=45*alog( (image > (-9.)) +10.)
	
	RETURN,image
END
