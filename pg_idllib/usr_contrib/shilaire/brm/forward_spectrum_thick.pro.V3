; PSH 2003/05/29 -- v3	
;
; This script determines the HXR bremsstrahlung emitted by an injection electron distribution in a thick target.
; If keyword 'Estar' is used, it disables (of course) the 'il' keyword (puts it to 1.), and applies a correction due to a unit step ionization level.
; /ALBEDO correction might not be the very best there is...
;
;EXAMPLE:
;	sp=forward_spectrum_thick(/EARTH)
;	PLOT,DINDGEN(100)+0.5,sp,/XLOG,/YLOG,xtit='photon energy [keV]',ytit='[photons s!U-1!N cm!U-2!N keV!U-1!N]',xr=[1,100]
;
;COMMENTS:	
;	This version was updated from v2, using IDL's INT_2D.pro function (which made necessary structural changes through the use of COMMON BLOCKS...)
;	It is A LOT FASTER than the previous method, with the same (if not better) accuracy!!!!!! HURRAY!!!!
;	BUT BEWARE! If the electron injection function is not sufficiently smooth, then we might get surprises... so the V2 version is still USEFUL!!!
;	( a kink seems OK, a complete cut-off leads to problems...)
;	Maybe using unitless values would improve things...?
;--------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------
FUNCTION forward_spectrum_thick__brm_crosssection, E
	COMMON FS_COMMON, FS_PARAMS
	res=DBLARR(N_ELEMENTS(E))
	ss=WHERE(E GT FS_PARAMS.curEph)
	IF ss[0] NE -1 THEN FOR i=0L,N_ELEMENTS(ss)-1 DO res[ss[i]]=betheheitler_brm_crosssection(E[i],FS_PARAMS.curEph)	
	RETURN,res
END
;--------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------
FUNCTION forward_spectrum_thick__electron_injection, E0		; F0(E0) in [electrons.s^-1.keV^-1]
	COMMON FS_COMMON, FS_PARAMS

	delta=FS_PARAMS.delta
	dN50dt=FS_PARAMS.dN50dt 	;dotN50=5e26
	
	IF E0 LT 0D THEN RETURN,0D	; no low-energy cutoff	
	;IF E0 LT 20D THEN RETURN,0D	; low-energy cutoff
	;IF E0 LT 20D THEN RETURN,dN50dt*(20D/50D)^(-delta)	; flat below cutoff				
	;IF E0 GT 3000D THEN RETURN,0D	; high-energy cutoff
	;IF E0 LE 20D THEN RETURN,dN50dt*(20D/50D)^(-delta) ELSE RETURN,0D	;unit step distribution
	RETURN, dN50dt*(E0/50D)^(-delta)
END
;--------------------------------------------------------------------------------------------
FUNCTION forward_spectrum_thick__integrand, E,E0
	COMMON FS_COMMON, FS_PARAMS
	RETURN, forward_spectrum_thick__electron_injection(E0)*forward_spectrum_thick__brm_crosssection(E)/E/collisional_energy_loss_crosssection(E,FS_PARAMS.il,T=FS_PARAMS.targetT)
END
;--------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------
FUNCTION forward_spectrum_thick__PQlimits, E
	COMMON FS_COMMON, FS_PARAMS
	RETURN, [FS_PARAMS.curEph,E]
END
;--------------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------------
FUNCTION forward_spectrum_thick,EARTH=EARTH,LOUD=LOUD, il=il, targetT=targetT, Estar=Estar, delta=delta, dN50dt=dN50dt, ALBEDO=ALBEDO, thermal=thermal, Eph=Eph, E0max=E0max, PTS=PTS
	
	COMMON FS_COMMON, FS_PARAMS
	FS_PARAMS={FS_PARAMS, LOUD:0, il:-1d, targetT:-1d, delta:-1d, dN50dt:-1d, E0max:-1d, curEph:-1d}

	IF KEYWORD_SET(LOUD) THEN FS_PARAMS.LOUD=LOUD ELSE FS_PARAMS.LOUD=0
	IF KEYWORD_SET(il) THEN FS_PARAMS.il=DOUBLE(il) ELSE FS_PARAMS.il=1d
	IF KEYWORD_SET(targetT) THEN FS_PARAMS.targetT=DOUBLE(targetT)
	IF KEYWORD_SET(delta) THEN FS_PARAMS.delta=DOUBLE(delta) ELSE FS_PARAMS.delta=4d
	IF KEYWORD_SET(dN50dt) THEN FS_PARAMS.dN50dt=DOUBLE(dN50dt) ELSE FS_PARAMS.dN50dt=1.295e33
	IF KEYWORD_SET(Estar) THEN FS_PARAMS.IL=1d
	IF KEYWORD_SET(E0max) THEN FS_PARAMS.E0max=DOUBLE(E0max) ELSE FS_PARAMS.E0max=3000d
	IF NOT EXIST(Eph) THEN Eph=DINDGEN(100)+0.5
	IF NOT KEYWORD_SET(PTS) THEN PTS=48		;allowed values: 6,10,20,48,96
	
	tmp=Eph[1]-Eph[0]	
	Eph_edges=TRANSPOSE([[Eph-tmp/2.],[Eph+tmp/2.]])
	sp=DBLARR(N_ELEMENTS(Eph))		
	FOR i=0L,N_ELEMENTS(Eph)-1 DO BEGIN
		IF KEYWORD_SET(LOUD) THEN PRINT,'Doing Eph= '+strn(Eph[i])+' keV'
		FS_PARAMS.curEph=Eph[i]
		sp[i]=INT_2D('forward_spectrum_thick__integrand',[Eph[i],FS_PARAMS.E0max],'forward_spectrum_thick__PQlimits',PTS,/DOUBLE,/ORDER)
	ENDFOR
	
	; sp currently in [photons s^-1 kev^-1]
	D=499D * 29979245800D	;[cm] Sun-Earth distance
	IF KEYWORD_SET(EARTH) THEN sp=sp/(4*!dPI*D^2)	; sp now in [photons s^-1 cm^-2 kev^-1]
	IF KEYWORD_SET(Estar) THEN sp=sp*kontar_ionization_correction(Eph, delta, Estar=DOUBLE(Estar))
	IF KEYWORD_SET(ALBEDO) THEN sp=sp*alexander_albedo_correction(Eph,delta-1.)
	IF KEYWORD_SET(thermal) THEN sp=sp+mewe_kev(DOUBLE(thermal[0])*11.594,Eph_edges,/EDGES,/photon,/kev,earth=EARTH)*DOUBLE(thermal[1])*1e5	; add thermal bremsstrahlung component...(thermal[0] is temprature in keV, thermal[1] is EM in 10^49 cm^-3 units)
	RETURN,sp
END
;--------------------------------------------------------------------------------------------
