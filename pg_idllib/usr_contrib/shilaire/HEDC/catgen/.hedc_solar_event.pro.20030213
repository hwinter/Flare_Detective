;
;This is version 2 of hedc_solar_event.pro. 
;The first version was last saved on 2002/05/11: it assumed a rough time interval as input, whence everything else was derived.
;In version 2 (2002/05/12), it is assumed that the input are the flare times. Actual observing times are the same, plus 5 minutes on each sides.
;
;Version 3 (2002/05/13) : create & destroy image at every time I make one in ROI_CUM
;
; 2002/06/21: added the /APPROXTIMES keyword
; 2002/07/08: replaced hedc_determine_image_times.pro calls by hedc_get_img_intv.pro calls, which isn't so far backgnd-subtracted
; 2002/09/06: corrected for changes to retrieved objects in Obs. Summ. stuff. Added call to hedc_find_flare_pos.pro
; 2002/10/03: leave most of the long stuff (imaging) for the end...
; 2002/11/04: uses draw_hsi_lc.pro to plot lightcurves...
; 2002/11/18: uses counts instead of semi-calibrated data for RHESSI spectra.
; 2002/12/01: for ROI_CUM, improved handling in case of bad images. Changed SC_PANEL: uses shade_surf now...
; 2002/12/08: major changes. In case of problems, one can use the .hedc_solar_event.pro.20021208 version.
;
;
;	EXAMPLE:
;		hedc_solar_event,'2002/07/23 '+['00:18:00','01:16:00'],/Zbuff,/STD,/BREAK,backgndtime='2002/07/23 '+['00:15:00','00:16:00']
;		hedc_solar_event,'2002/02/20 '+['10:55:00','11:15:00'],/Zbuff,/STD,/BREAK
;=======================================================================================================================
;=======================================================================================================================
; the following is to write an .einfo ascii file readable by Etzard for import.
PRO write_hedc_event,a,filename

b={HEDC_EVENT_SCHEMA_1,									$		
	s12_hle_code 	: a.EVENT_CODE,							$
	i07_hle_eventID : a.EVENT_ID_NUMBER,						$
	c04_hle_eventType : a.EVENT_TYPE,						$
	i05_hle_minEnergy : a.MIN_ENERGY_FOUND,						$
	i05_hle_MAXENERGY :	a.MAX_ENERGY_FOUND,					$
	f12_hle_totalCounts : a.TOTAL_COUNTS_12_25,					$
	f04_hle_distanceSun : -9999.,							$
	f04_hle_xpos : '-9999',								$
	f04_hle_ypos : '-9999',								$
	dat_hle_creationDate : anytim2oracle(a.CREATION_DATE),				$
	dat_hle_startDate : anytim2oracle(a.START_DATETIME),				$
	i08_hle_startTime : a.START_TIMEOFDAY,						$
	dat_hle_endDate	: anytim2oracle(a.END_DATETIME),				$
	i08_hle_endTime : a.END_TIMEOFDAY,						$
	i08_hle_duration : a.DURATION,							$
	dat_hle_pDate_3_6k	: anytim2oracle(a.PEAK_DATETIME_3_12),			$
	i08_hle_pTime_3_6k	: a.PEAK_TIMEOFDAY_3_12,				$
	f10_hle_pCts_3_6k	: a.PEAK_COUNTRATE_3_12,				$
	i08_hle_dura_3_6k	: a.TOTAL_COUNTS_3_12,					$
	dat_hle_pDate_12_25k: anytim2oracle(a.PEAK_DATETIME_12_25),			$	
	i08_hle_pTime_12_25k: a.PEAK_TIMEOFDAY_12_25,					$
	f10_hle_pCts_12_25k	: a.PEAK_COUNTRATE_12_25,				$
	i08_hle_dura_12_25k	: a.TOTAL_COUNTS_12_25,					$
	dat_hle_pDate_1_20M	: anytim2oracle(a.PEAK_DATETIME_25_100),		$
	i08_hle_pTime_1_20M	: a.PEAK_TIMEOFDAY_25_100,				$
	f10_hle_pCts_1_20M	: a.PEAK_COUNTRATE_25_100,				$
	i08_hle_dura_1_20M	: a.TOTAL_COUNTS_25_100,				$
	f06_hle_peakRatio	: STRN(a.PEAK_RATIO,format='(f12.3)'),			$
	i02_hle_multiplicity : a.MULTIPLICITY,						$
	s06_hle_activeRegion : STRING(a.ACTIVE_REGION),					$
	boo_hle_simulatedData: a.SIMULATED,						$
	boo_hle_saa :	a.SAA_FLAG,							$
	boo_hle_eclipse : a.ECLIPSE_FLAG,						$
	f10_hle_backgndRate : a.BCKGND_RATE_12_25,					$
	txt_hle_files : a.RELATED_FILES,						$
	s20_hle_reserve1	: a.RESERVE1,						$
	s20_hle_reserve2	: a.RESERVE2,						$
	s20_hle_reserve3	: a.RESERVE3,						$
	s20_hle_reserve4	: a.RESERVE4,						$
	i10_hle_reserve1	: a.FLARELISTNBR,					$
	i10_hle_reserve2	: a.RESERVE6,						$
	f10_hle_reserve1	: a.RESERVE7,						$
	f10_hle_reserve2	: a.RESERVE8,						$
	txt_hle_comments	: a.COMMENTS	}
		
if a.DISTANCE_FROM_SUN_CENTER ne -9999. then b.f04_hle_distanceSun = STRN(a.DISTANCE_FROM_SUN_CENTER,format='(f6.1)')
if a.X_OFFSET ne -9999. then b.f04_hle_xpos = STRN(a.X_OFFSET,format='(f6.1)')
b.f04_hle_xpos = 999.9 < b.f04_hle_xpos
b.f04_hle_xpos = -999.9 > b.f04_hle_xpos
if a.Y_OFFSET ne -9999. then b.f04_hle_ypos = STRN(a.Y_OFFSET,format='(f6.1)')
b.f04_hle_ypos = 999.9 < b.f04_hle_ypos
b.f04_hle_ypos = -999.9 > b.f04_hle_ypos
IF a.TOTAL_COUNTS_3_12 GT 99999999 THEN i08_hle_dura_3_6k=99999999

FILE_DELETE,filename,/QUIET
printai,a
printai,b
printai,b,filename=filename
END
;=======================================================================================================================
PRO hedc_make_event_struct,time_interval,etype,idnbr,a,	$
	creator=creator,einfodir=einfodir

if not keyword_set(einfodir) then einfodir=getlog('HEDC_DATA_DIR')

a={HEDC_EVENT_STRUCT_2, Structure_version: 1,				$
			EVENT_CREATOR: 'HEDC',				$
			EVENT_TYPE:'-9999',				$
			EVENT_CODE:'HEC',				$
			EVENT_ID_NUMBER:-9999L,				$
			MIN_ENERGY_FOUND:-9999,				$
			MAX_ENERGY_FOUND:-9999,				$
			X_OFFSET:-9999.,				$
			Y_OFFSET:-9999.,				$
			DISTANCE_FROM_SUN_CENTER:-9999.,		$
						
			START_DATETIME:	'-9999',			$
			START_TIMEOFDAY:-9999.D,			$
			END_DATETIME: 	'-9999',			$
			END_TIMEOFDAY:	-9999.D,			$
			DURATION: 	-9999.D,				$
			
			PEAK_DATETIME_12_25:'-9999',		$
			PEAK_TIMEOFDAY_12_25:-9999.D,		$
			PEAK_COUNTRATE_12_25:-9999.D,		$
			TOTAL_COUNTS_12_25:-9999L,			$			

			PEAK_RATIO	:-9999.,				$
			MULTIPLICITY	:-9999,				$
			ACTIVE_REGION	:-9999,				$
			
			PEAK_DATETIME_3_12: '-9999',		$
			PEAK_TIMEOFDAY_3_12:-9999.D,		$
			PEAK_COUNTRATE_3_12:-9999.D,		$
			TOTAL_COUNTS_3_12:-9999L,			$
			
			PEAK_DATETIME_25_100	:'-9999',	$
			PEAK_TIMEOFDAY_25_100	:-9999.D,	$
			PEAK_COUNTRATE_25_100	:-9999.D,	$
			TOTAL_COUNTS_25_100	:-9999L,	$	
			
			SIMULATED	:-9999,					$
			SAA_FLAG	:-9999,					$
			ECLIPSE_FLAG	:-9999,				$
			
			BCKGND_RATE_12_25:-9999.D,			$
			
			RESERVE1	:'9',					$	
			RESERVE2	:'-9999',				$			
			RESERVE3	:'-9999',				$
			RESERVE4	:'-9999',				$
			
			FLARELISTNBR	:-9999,					$
			RESERVE6	:-9999,					$			
			
			RESERVE7	:-9999.D,				$
			RESERVE8	:-9999.D,				$
			
			RELATED_FILES : '',					$
			
			CREATION_DATE	:'-9999',			$
			COMMENTS	:'-9999'}



a.EVENT_TYPE=etype
a.EVENT_ID_NUMBER=idnbr
if keyword_set(creator) then a.EVENT_CREATOR=creator
if not keyword_set(stdoutmarker) then stdoutmarker='HEDCout '

;SIMULATED
a.SIMULATED=0

;CREATION_DATE
bla=systime()
bla=strmid(bla,8,2)+'-'+strmid(bla,4,3)+'-'+strmid(bla,22,2)+' '+strmid(bla,11,8)
a.CREATION_DATE=anytim(bla,/ECS)

; COMMENTS :
;;;;a.COMMENTS='None. //'+'None again. //'

;write to stdoutput with everything...
printai,a
END
;=======================================================================================================================



;=======================================================================================================================
;=======================================================================================================================
;=======================================================================================================================
;=======================================================================================================================
;=======================================================================================================================
;=======================================================================================================================
PRO hedc_solar_event,flare_time_interval,			$
	;ENV keywords:
	newdatadir=newdatadir,					$
	ZBUFFER=ZBUFFER,					$
	pictype=pictype,					$
	charsize=charsize,					$	
	BREAKONDPERROR=BREAKONDPERROR,				$
	NOFLAGCHECK=NOFLAGCHECK,				$	; IF set, will NOT check for SAA and NIGHT flags.
	addOBStime=addOBStime,					$	; at both ends, for a better overview..
	NO_ROLL_SOLUTION=NO_ROLL_SOLUTION,			$	; if set, does NOT use PMTRAS for as_roll_solution
	NOCHECKFILES=NOCHECKFILES,				$	; if set, will not check whether the fits files for the whole interval are present, according to hsi_filedb.fits ...
	REMOVE_FROM_HEDC=REMOVE_FROM_HEDC,			$	; if set, will erase all HLEs on HEDC with similar eventcode
	
	;info keywords:
	eventtype=eventtype,					$
	eventidnbr=eventidnbr,					$	
	creator=creator	,					$

	;the following keywords, if not set, will imply processing:
	xyoffset=xyoffset,					$	;SIDE EFFECT IF NOT SET: a full sun IMAGE is created
	backgndtime=backgndtime,				$	;FOR COUNTS and SPEX (not yet implemented), CAN be outside obs_time_interval
	nbrsources=nbrsources,					$
	NOFLARELISTSEARCH=NOFLARELISTSEARCH,			$

	;'to do' keywords
	FINE_FULLSUN=FINE_FULLSUN,				$	; will make a fine full sun image (i.e. 512x512 instead of 128x128))
	TE_IMG=TE_IMG,						$
	SC_IMG=SC_IMG,						$
	ROI_CUM=ROI_CUM,					$
	MEM_ROI=MEM_ROI,					$	; if set, will make a MEM image of ROI at peak time
	SPECTRA=SPECTRA,					$
	OS_PAGE=OS_PAGE,					$
	SP_INDEX=SP_INDEX,					$
	HSPG=HSPG,						$
	PHOENIX=PHOENIX,					$
	HP_SPG=HP_SPG,						$
	ASPECT=ASPECT,						$
	TRUE_COLOR=TRUE_COLOR,					$
	MOREIMG=MOREIMG,					$
	NO_LCO=NO_LCO,						$

	DEBUG=DEBUG,						$	;for debugging only!!!
	MINIMUM=MINIMUM,					$	
	STD=STD
;================================================================	

	startsystime=SYSTIME(/SEC)
	
	;Some parameters...
	DPjobNbr=0
	DPjobDone=0
	imgnbr=-1
	es=0	;Error_Status
	
	IF NOT KEYWORD_SET(TE_IMG) THEN TE_IMG=0
	IF NOT KEYWORD_SET(SC_IMG) THEN SC_IMG=0
	IF NOT KEYWORD_SET(OS_PAGE) THEN OS_PAGE=0
	IF NOT KEYWORD_SET(ASPECT) THEN ASPECT=0
	IF NOT KEYWORD_SET(SPECTRA) THEN SPECTRA=0
	IF NOT KEYWORD_SET(HSPG) THEN HSPG=0
	IF NOT KEYWORD_SET(PHOENIX) THEN PHOENIX=0
	IF NOT KEYWORD_SET(ROI_CUM) THEN ROI_CUM=0
	IF NOT KEYWORD_SET(MEM_ROI) THEN MEM_ROI=0
	IF NOT KEYWORD_SET(SP_INDEX) THEN SP_INDEX=0
	IF NOT KEYWORD_SET(HP_SPG) THEN HP_SPG=0	
	IF NOT KEYWORD_SET(TRUE_COLOR) THEN TRUE_COLOR=0	
	IF NOT KEYWORD_SET(MOREIMG) THEN MOREIMG=0
	IF NOT KEYWORD_SET(NO_LCO) THEN NO_LCO=0
	IF KEYWORD_SET(STD) THEN BEGIN
		OS_PAGE=1 & ASPECT=0  & SPECTRA=0 & HP_SPG=1 & SC_IMG=1 & ROI_CUM=1 & MEM_ROI=1 & HSPG=0  & TRUE_COLOR=1 & MOREIMG=1 & NO_LCO=0       & nbrsources=-9999
	ENDIF	
	IF KEYWORD_SET(MINIMUM) THEN BEGIN	
		OS_PAGE=1 & ASPECT=0  & SPECTRA=0  & MEM_ROI=1 & HP_SPG=1 & HSPG=1 & nbrsources=-9999 & NOFLARELISTSEARCH=1 & MOREIMG=0	& NO_LCO=1 ;& NOFLAGCHECK=1
	ENDIF	
	IF KEYWORD_SET(DEBUG) THEN BEGIN
		BREAKONDPERROR=1 & OS_PAGE=0 & ASPECT=0  & SPECTRA=0 & HP_SPG=0 & SC_IMG=0 & ROI_CUM=0 & MEM_ROI=0 & HSPG=0  & TRUE_COLOR=0  & MOREIMG=1 & NO_LCO=1 & REMOVE_FROM_HEDC=0     & nbrsources=-9999
	ENDIF
					
	CBAR=1
	DO_IMG=1
	
	;ENV:
	IF NOT KEYWORD_SET(newdatadir) THEN newdatadir='~/NEWHEDCDATA/'	;'/global/hercules/users/shilaire/NEWHEDCDATA/'	
	IF NOT KEYWORD_SET(addOBStime) THEN addOBStime=90.	; on both sides !!!
	obs_time_interval=anytim(flare_time_interval)+addOBStime*[-1.,1.]
	t0=anytim(obs_time_interval[0])
	IF KEYWORD_SET(ZBUFFER) THEN BEGIN
		old_device=!D.NAME
		SET_PLOT,'Z',/COPY
	ENDIF
	hedc_win
	!P.MULTI=0
	hessi_ct
	TVLCT,r,g,b,/GET
	IF NOT KEYWORD_SET(pictype) THEN pictype='png'
	IF NOT KEYWORD_SET(charsize) THEN BEGIN
		IF NOT KEYWORD_SET(ZBUFFER) THEN charsize=1.2 ELSE charsize=1.0
	ENDIF

	;info:
	IF NOT KEYWORD_SET(eventtype) THEN eventtype='S'
	IF NOT KEYWORD_SET(eventidnbr) THEN eventidnbr=-9999L	; not used, now (2002/04/26)
	IF NOT KEYWORD_SET(creator) THEN creator='HEDC'

; check whether the HESSI fits files are present or not.
	IF NOT KEYWORD_SET(NOCHECKFILES) THEN BEGIN
		tmp=all_hessi_files_present(obs_time_interval)
		IF tmp LT 1 THEN MESSAGE,'................... Some or all of the HESSI fits files are not there -- aborting............'			
	ENDIF

;//create ev_struct
	hedc_make_event_struct,flare_time_interval,eventtype,eventidnbr,ev_struct,CREATOR=creator,einfodir=newdatadir
	; at this point, we have all that is needed in ev_struct for future hedc_write_info_file.pro, except MIN & MAX energy found... (who cares: only for os01 DPs...)
	;	AND MOST IMPORTANTLY, EVENT_CODE !!!

	;processing:
	IF NOT KEYWORD_SET(backgndtime) THEN backgndtime=anytim(obs_time_interval(0))+[0.,60.]	
;=========================================================================================================================
	;FIRST: LIGHTCURVES !!!!
IF NOT KEYWORD_SET(NO_LCO) THEN BEGIN
		;must do a lightcurve...and find XXXtim...
		lco=hsi_lightcurve()
		ebands=[3,6,12,25,50,100,300]		; should never change this value .... I assumed some stuff, later on...
		TIMEBIN=4.  				; should never change this value .... I assumed some stuff, later on...
		lco->set,ltc_time_res=TIMEBIN,ltc_energy_band=ebands,SEG_INDEX_MASK=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]	;,/SP_SEMI_CAL
		
		lco->set,time_range=anytim(backgndtime)
		back_lc=lco->getdata()
	IF N_ELEMENTS(back_lc) EQ 1 THEN RETURN
		PRINT,'.........................RETRIEVING BACKGROUND LIGHTCURVE'
		back_times=lco->getdata(/xaxis)
		PRINT,' Mean of background at 12-25 keV: '+strn(MEAN(back_lc[*,2]))+' counts (timebinning: '+strn(TIMEBIN)+' seconds.)'
		PRINT,' Sigma of background at 12-25 keV: '+strn(STDEV(back_lc[*,2]))

	;average out to get the mean backgnd levels:
		FOR i=0,N_ELEMENTS(ebands)-2 DO BEGIN
			IF NOT EXIST(backgnd_lvl) THEN backgnd_lvl=MEAN(back_lc[*,i]) ELSE backgnd_lvl=[backgnd_lvl,MEAN(back_lc[*,i])]
		ENDFOR
		
		lco->set,time_range=anytim(obs_time_interval)
		PRINT,'.........................RETRIEVING RAW LIGHTCURVE'
		raw_lc=lco->getdata()
	IF N_ELEMENTS(raw_lc) EQ 1 THEN RETURN
		lc_all=raw_lc

;BACKGROUND SUBTRACTION
;	PRINT,'....... SUBTRACTING BACKGROUND LEVELS FROM LIGHTCURVES...'
;		FOR i=0,N_ELEMENTS(ebands)-2 DO lc_all[*,i]=raw_lc[*,i]-backgnd_lvl[i]
		
		taxis=lco->getdata(/xaxis)
ENDIF ELSE BEGIN
	oso=hsi_obs_summary()
	oso->set,obs_time=obs_time_interval
	tmp=oso->getdata(class_name='hsi_obs_summ_rate')
	TIMEBIN=oso->get(class_name='hsi_obs_summ_rate',/TIME_INTV)
	lc_all=TRANSPOSE(tmp.COUNTRATE[0:5])*TIMEBIN*9.
	taxis=oso->getdata(class_name='hsi_obs_summ_rate',/TIME_arr)
ENDELSE
;------------------------------------------------------------------------------------------------------------------------
	;peaktim = where it is highest in 12-25 range
		maxcounts=max(lc_all[*,2],ss)
		ss_peak=ss[0]
		PRINT,'Peak number of counts in our timebin: '+strn(maxcounts)
		peaktim=taxis[ss_peak]
		print,'PEAK TIME is: '+anytim(peaktim,/ECS)
		ev_struct.PEAK_DATETIME_12_25=anytim(peaktim,/ECS)
		ev_struct.PEAK_TIMEOFDAY_12_25=anytim(peaktim,/time_only)


;//define eventcode : need peaktim
	tmp=anytim(peaktim,/ex)
	eventcode='HX'+eventtype+int2str(tmp(6)-2000,1)+int2str(tmp(5),2)+int2str(tmp(4),2)+int2str(tmp(0),2)+int2str(tmp(1),2)
	ev_struct.EVENT_CODE=eventcode

	;peak rates
		ev_struct.PEAK_COUNTRATE_12_25=lc_all[ss[0],2]/TIMEBIN
		ev_struct.PEAK_RATIO=lc_all[ss[0],3]/lc_all[ss[0],2]	; 25-50/12-25

	;ss_beg and ss_end:
		ss=WHERE(taxis GE anytim(flare_time_interval[0]))
		ss_beg=ss[0]
		ss=WHERE(taxis GE anytim(flare_time_interval[1]))
		ss_end=ss[0]

	;get halftim1&2
		;OLD WAY:
		;ss=WHERE(lc_all[*,2] ge maxcounts*0.5)
		;halftim1=taxis[ss[0]]
		;halftim2=taxis[ss[N_ELEMENTS(ss)-1]]
		;NEW WAY:
		halftim1=0.5*(taxis[ss_beg]+taxis[ss_peak])
		halftim2=0.5*(taxis[ss_peak]+taxis[ss_end])
		print,'HALF TIMES are: '+anytim(halftim1,/ECS)+' and '+anytim(halftim2,/ECS)

		tmp=taxis[ss_beg]
		ev_struct.START_DATETIME=anytim(tmp,/ECS)
		ev_struct.START_TIMEOFDAY=anytim(tmp,/time_only)
		tmp=taxis(ss_end)
		ev_struct.END_DATETIME=anytim(tmp,/ECS)
		ev_struct.END_TIMEOFDAY=anytim(tmp,/time_only)
		ev_struct.DURATION=anytim(ev_struct.END_DATETIME)-anytim(ev_struct.START_DATETIME)

		ev_struct.TOTAL_COUNTS_3_12=	TOTAL(lc_all[ss_beg:ss_end,0:1])/1000.
		ev_struct.TOTAL_COUNTS_12_25=	TOTAL(lc_all[ss_beg:ss_end,2])/1000.
		ev_struct.TOTAL_COUNTS_25_100=	TOTAL(lc_all[ss_beg:ss_end,3:4])/1000.

		tmp=max(TOTAL(lc_all(*,0:1),2),ss)
		ev_struct.PEAK_DATETIME_3_12=anytim(taxis[ss[0]],/ECS)
		ev_struct.PEAK_COUNTRATE_3_12=tmp/TIMEBIN
		ev_struct.PEAK_TIMEOFDAY_3_12=anytim(taxis[ss[0]],/time_only)

		tmp=max(TOTAL(lc_all[*,3:4],2),ss)
		ev_struct.PEAK_DATETIME_25_100=anytim(taxis[ss[0]],/ECS)
		ev_struct.PEAK_COUNTRATE_25_100=tmp/TIMEBIN
		ev_struct.PEAK_TIMEOFDAY_25_100=anytim(taxis[ss[0]],/time_only)

IF NOT KEYWORD_SET(NO_LCO) THEN BEGIN
		info=lco->get()
		hedc_win,768,512
		myct3
		TVLCT,r,g,b,/GET
	;PLOT & SAVE linear lightcurve:
		DPjobnbr=DPjobnbr+1		
		IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL01 & ENDIF & ENDIF
		rootfil=newdatadir+'HEDC_DP_lc00_'+eventcode
		;lco->plot,charsize=charsize,title='Non-calibrated HESSI counts'
			draw_hsi_lc,lco,title='Non-calibrated HESSI counts, all segments',ebands=[3,6,12,25,50,100,300]
			TVLCT,r,g,b,/GET
		;DISPLAY BACKGROUND interval:
			tmp=REPLICATE(0.18*(!Y.CRANGE(1)-!Y.CRANGE(0))+!Y.CRANGE(0),N_ELEMENTS(back_times))
			oplot,back_times-t0,tmp,thick=3,color=250
			XYOUTS,/DATA,back_times(0)-t0,0.2*(!Y.CRANGE(1)-!Y.CRANGE(0))+!Y.CRANGE(0),'BACKGROUND',color=250
		CALL_PROCEDURE,'write_'+pictype,rootfil+'.'+pictype,TVRD(),r,g,b
		IF FILE_EXIST(rootfil+'.'+pictype) THEN hedc_write_info_file,'lc',ev_struct,info,rootfil+'.info'
		DPjobdone=DPjobdone+1
		LABEL01:
	;another ylog:
		DPjobnbr=DPjobnbr+1		
		IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL02 & ENDIF & ENDIF
		rootfil=newdatadir+'HEDC_DP_lc01_'+eventcode
		;lco->plot,/ylog,charsize=charsize,title='Non-calibrated HESSI counts'
			draw_hsi_lc,lco,title='Non-calibrated HESSI counts, all segments',ebands=[3,6,12,25,50,100,300],/YLOG
			TVLCT,r,g,b,/GET
		;DISPLAY BACKGROUND interval:
			tmp=REPLICATE(0.48*(!Y.CRANGE(1)-!Y.CRANGE(0))+!Y.CRANGE(0),N_ELEMENTS(back_times))
			oplot,back_times-t0,10^tmp,thick=3,color=250
			XYOUTS,/DATA,back_times(0)-t0,10^(0.5*(!Y.CRANGE(1)-!Y.CRANGE(0))+!Y.CRANGE(0)),'BACKGROUND',color=250
		CALL_PROCEDURE,'write_'+pictype,rootfil+'.'+pictype,TVRD(),r,g,b
		IF FILE_EXIST(rootfil+'.'+pictype) THEN hedc_write_info_file,'lc',ev_struct,info,rootfil+'.info'
		DPjobdone=DPjobdone+1		
		LABEL02:

		obj_destroy,lco		
ENDIF		
;DETERMINE SPIN PERIOD=========================================================================
	spin_period=rhessi_get_spin_period(peaktim,/DEF)
	PRINT,'----------------------- SPIN PERIOD at peak time: '+strn(spin_period)+' s.'
;===============================================================================================================================================
;OBS.SUMM. STUFF
IF OS_PAGE NE 0 THEN BEGIN
	DPjobnbr=DPjobnbr+1		
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL11 & ENDIF & ENDIF
	rootfilename=newdatadir+'HEDC_DP_os04_'+eventcode
	PRINT,'.........................OBS. SUMM. PAGE'
	obs_summ_page,obs_time_interval,filename=rootfilename+'.'+pictype
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'os4',ev_struct,obs_time_interval,rootfilename+'.info'
	
	hedc_win,630,512
	my_hessi_ct,colors
	plot_hessi_pos,obs_time_interval
	rootfilename=newdatadir+'HEDC_DP_os01_'+eventcode
	TVLCT,r,g,b,/GET
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'os1',ev_struct,obs_time_interval,rootfilename+'.info'
	DPjobdone=DPjobdone+1
	LABEL11:
	hessi_ct
ENDIF
;===============================================================================================================================================
; HESSI SPECTROGRAM
IF HSPG NE 0 THEN BEGIN
	DPjobnbr=DPjobnbr+1		
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL12 & ENDIF & ENDIF
	hedc_win,768,512
	PRINT,'.........................HESSI SPECTROGRAM'
	hedc_hsi_spg,anytim(obs_time_interval),/high
	rootfilename=newdatadir+'HEDC_DP_hsg0_'+eventcode
	TVLCT,r,g,b,/GET
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'hsg',ev_struct,obs_time_interval,rootfilename+'.info'
	DPjobdone=DPjobdone+1
	LABEL12:
ENDIF
;===============================================================================================================================================
; HESSI and PHOENIX SPECTROGRAMS
IF HP_SPG NE 0 THEN BEGIN
	DPjobnbr=DPjobnbr+1		
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL20 & ENDIF & ENDIF
	hedc_win,768,512
	PRINT,'.........................PHOENIX AND HESSI SPECTROGRAM'
	LOADCT,5
	clear_utplot
	rapp_cmb_spg, obs_time_interval,/UT
	rootfilename=newdatadir+'HEDC_DP_spg1_'+eventcode
	TVLCT,r,g,b,/GET
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'hps',ev_struct,obs_time_interval,rootfilename+'.info'
	DPjobdone=DPjobdone+1
	LABEL20:
ENDIF
;===============================================================================================================================================
; PHOENIX spectrogram
IF PHOENIX NE 0 THEN BEGIN
	DPjobnbr=DPjobnbr+1
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL13 & ENDIF & ENDIF
	hedc_win,768,512
	loadct,5
	PRINT,'.........................PHOENIX SPECTROGRAM'
	data=rapp_get_spectrogram(obs_time_interval,xaxis=xaxis,yaxis=yaxis,/ELIM,/BACK)
	IF datatype(data) EQ 'STR' THEN GOTO,LABEL13
	rapp_paint_spectrogram,data,xaxis,yaxis,/log,/despike
	rootfilename=newdatadir+'HEDC_DP_spg0_'+eventcode
	TVLCT,r,g,b,/GET
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'spg',ev_struct,obs_time_interval,rootfilename+'.info'
	DPjobdone=DPjobdone+1
	LABEL13:
ENDIF
;===============================================================================================================================================
PRINT,'Now running rhessi_find_flare_position.pro.......................'
flarepos=rhessi_find_flare_position(flare_time_interval,peaktim,time_intv=peak_accum_intv,/FURTHER,/REFINE)
HEAP_GC

IF NOT KEYWORD_SET(xyoffset) THEN BEGIN		
	IF N_ELEMENTS(flarepos) EQ 2 THEN BEGIN
		xoffset=flarepos[0]
		yoffset=flarepos[1]
		PRINT,'Flare position: '+strn(xoffset)+' '+strn(yoffset)
	ENDIF ELSE BEGIN PRINT,'.........flare finding has failed...SHOULD stop now with any imagery...' & DO_IMG=0 & xoffset=0 & yoffset=0 & ENDELSE
ENDIF ELSE BEGIN
	xoffset=xyoffset[0]
	yoffset=xyoffset[1]
ENDELSE
		
ev_struct.DISTANCE_FROM_SUN_CENTER=FIX( sqrt(xoffset^2 + yoffset^2) )
ev_struct.X_OFFSET=xoffset
ev_struct.Y_OFFSET=yoffset
HEAP_GC
;===============================================================================================================================================
;FULL SUN IMAGE (for now: do it always, whatever the status of the xyoffset keyword...)
imgnbr=imgnbr+1
		DPjobnbr=DPjobnbr+1		
		IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & PRINT,'.......Full Sun image failed....' & GOTO,LABEL03 & ENDIF & ENDIF
		IF KEYWORD_SET(FINE_FULLSUN) THEN BEGIN
			imgdim=512
			pixsiz=4
		ENDIF ELSE BEGIN
			imgdim=128
			pixsiz=16
		ENDELSE
		
		hessi_ct
		TVLCT,r,g,b,/GET
				
		imo=hsi_image()		
		imo->set,time_range=peak_accum_intv
		imo->set,image_dim=imgdim,pixel_size=pixsiz,det_index_mask=[0,0,0,0,0,0,1,1,1],image_alg='back',uniform=1
		imo->set,xyoffset=[0,0],energy_band=[12,25]
		IF NOT KEYWORD_SET(NO_ROLL_SOLUTION) THEN imo->set,as_roll_solution='PMT'  $;, ras_time_extension=[-500,500]	
		ELSE imo->set,as_roll_solution='FIX',as_spin_period=spin_period
		imo->set,/DP_ENABLE,UNIFORM_WEIGHTING=1
		imo->set_no_screen_output
		hedc_win
		PRINT,'.........................FULL SUN image'
		fullsunimg=imo->getdata()
		IF fullsunimg[0,0] EQ -1 THEN PRINT,'... full-Sun image failed...'
		IF CBAR EQ 1 THEN imo->plot,/limb,charsize=charsize,/CBAR  ELSE imo->plot,margin=0.07,/limb,charsize=charsize
		
		rootfilename=newdatadir+'HEDC_DP_im00_'+eventcode
		CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
		info=imo->get()
		IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'im',ev_struct,info,rootfilename+'.info'
		imo->fitswrite,fitsfile=rootfilename+'.fits',/CREATE
		DPjobdone=DPjobdone+1		
		LABEL03:
;===============================================================================================================================================						
;SOURCE MULTIPLICITY
	IF NOT KEYWORD_SET(nbrsources) THEN BEGIN
imgnbr=imgnbr+1
		imo->set,energy_band=[25,50],image_alg='back',image_dim=128,pixel_size=1,det_index_mask=[0,0,1,1,1,1,1,1,1],time_range=peak_accum_intv	;,time_range=anytim([halftim1,halftim2])-t0
		PRINT,'.........................SOURCE MULTIPLICITY'
		imo->set_no_screen_output
		tmp=imo->getdata() 
		find_sources,tmp,nb,pos,n_sigma=5,back_pix=0.2,low=0.2,/quiet
		;Now, the limit on low depends on Hessi's imaging dynamic range...
		ev_struct.MULTIPLICITY=nb
	
		IF CBAR EQ 1 THEN imo->plot,grid=10,charsize=charsize,/CBAR  ELSE imo->plot,margin=0.07,grid=10,charsize=charsize
		rootfilename=newdatadir+'HEDC_DP_im'+int2str(imgnbr,2)+'_'+eventcode
		CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
		info=imo->get()
		IF FILE_EXIST(rootfilename+pictype) THEN hedc_write_info_file,'im',ev_struct,info,rootfilename+'.info'
		imo->fitswrite,fitsfile=rootfilename+'.fits',/CREATE
	ENDIF ELSE ev_struct.MULTIPLICITY=nbrsources

;HESSI FLARE LIST NUMBER :
	IF NOT KEYWORD_SET(NOFLARELISTSEARCH) THEN BEGIN
		PRINT,'HESSI FLARE LIST NUMBER.......................'
		flo = obj_new('hsi_flare_list')
		flo ->set,obs_time_interval = [ev_struct.START_DATETIME,ev_struct.END_DATETIME]
		bla = flo->getdata()
		if datatype(bla) eq 'STC' then ev_struct.FLARELISTNBR = bla[0].ID_NUMBER
		obj_destroy,flo
		delvarx,flo
	ENDIF


;SAA & NIGHT FLAGS
	IF NOT KEYWORD_SET(NOFLAGCHECK) THEN BEGIN
		es=0
		IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL16 & ENDIF & ENDIF		
		oso=hsi_obs_summary()
		oso->set,obs_time_interval=obs_time_interval
		flagdata_struct=oso->getdata(class_name='obs_summ_flag')
		flagdata=flagdata_struct.FLAGS
		ss=WHERE(flagdata(0,*) NE 0)
		IF ss(0) NE -1 THEN ev_struct.SAA_FLAG=1 ELSE ev_struct.SAA_FLAG=0
		ss=WHERE(flagdata(1,ss_beg:ss_end) NE 0)
		IF ss(0) NE -1 THEN ev_struct.ECLIPSE_FLAG=1 ELSE ev_struct.ECLIPSE_FLAG=0
		LABEL16:
		OBJ_DESTROY,oso
	ENDIF

; Finished defining event, can save the .einfo file:
	;=====================================================================
	write_hedc_event,ev_struct,newdatadir+'HEDC_EVENT_'+eventcode+'.einfo'
	;=====================================================================
;IF N_ELEMENTS(flarepos) NE 2 THEN MESSAGE,'........hedc_solar_event.pro stopping now, as the rest does not look promising at all...'
;===============================================================================================================================================
IF datatype(imo) EQ 'OBJ' THEN BEGIN
	OBJ_DESTROY,imo
	HEAP_GC
	imo=hsi_image()
	PRINT,anytim(peak_accum_intv,/ECS)
	imo->set,time_range=peak_accum_intv
	imo->set,xyoffset=[xoffset,yoffset]
ENDIF
;===============================================================================================================================================
;  CLEAN image of ROI at peak time, 12-25 keV
IF ((MEM_ROI NE 0) AND (DO_IMG NE 0)) THEN BEGIN
	DPjobnbr=DPjobnbr+1
	es=0
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN CATCH,/CANCEL & es=0 & GOTO,LABEL_CLEAN_ROI & ENDIF & ENDIF		

	hedc_win	
	hessi_ct
	TVLCT,r,g,b,/GET
	
	imo->set,image_alg='clean',pixel_size=1.,image_dim=128,det_index_mask=[0,0,1,1,1,1,1,1,0],energy_band=[12,25]
	imo->set_no_screen_output
	PRINT,'.........................ROI CLEAN image: '+anytim(peaktim,/ECS)+'    eband: 12-25 keV.'
	IF CBAR EQ 1 THEN imo->plot,grid=10,charsize=charsize,/CBAR  ELSE imo->plot,margin=0.07,grid=10,charsize=charsize

	rootfilename=newdatadir+'HEDC_DP_im01_'+eventcode
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	info=imo->get()
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'im',ev_struct,info,rootfilename+'.info'
	imo->fitswrite,fitsfile=rootfilename+'.fits',/CREATE
	DPjobdone=DPjobdone+1
	
	LABEL_CLEAN_ROI:
;MEM for exact same parameters...(for comparison with MEM, above)
	IF NOT KEYWORD_SET(MINIMUM) THEN BEGIN
		DPjobnbr=DPjobnbr+1
		es=0
		IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN CATCH,/CANCEL & es=0 & GOTO,LABEL_MEM_ROI & ENDIF & ENDIF		
	
		hedc_win	
		hessi_ct
		TVLCT,r,g,b,/GET
		
		imo->set,image_alg='mem'
		imo->set_no_screen_output
		PRINT,'.........................ROI MEM image: '+anytim(peaktim,/ECS)+'    eband: 12-25 keV.'
		IF CBAR EQ 1 THEN imo->plot,grid=10,charsize=charsize,/CBAR  ELSE imo->plot,margin=0.07,grid=10,charsize=charsize
			
		rootfilename=newdatadir+'HEDC_DP_im02_'+eventcode
		CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
		info=imo->get()
		IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'im',ev_struct,info,rootfilename+'.info'
		imo->fitswrite,fitsfile=rootfilename+'.fits',/CREATE
		DPjobdone=DPjobdone+1
		LABEL_MEM_ROI:
	ENDIF		
ENDIF
;=============================================================================================================================================================
; SC PANEL
IF ((SC_IMG NE 0) AND (DO_IMG NE 0)) THEN BEGIN
	DPjobnbr=DPjobnbr+1
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL05 & ENDIF & ENDIF
	PRINT,'.........................SC PANEL'
 	imo->set,image_alg='back',energy_band=[12,25],time_range=peak_accum_intv
	hedc_win,900
	hessi_ct
	TVLCT,r,g,b,/GET
	
	hedc_sc_panel_plot,imo,/SHADE_SURF

	rootfilename=newdatadir+'HEDC_DP_pscA_'+eventcode
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'scA',ev_struct,peak_accum_intv,rootfilename+'.info'	
	DPjobdone=DPjobdone+1
	LABEL05:
	!P.MULTI=0
ENDIF
;===============================================================================================================================================
;TRUE COLOR IMAGE...
IF ((TRUE_COLOR NE 0) AND (DO_IMG NE 0)) THEN BEGIN
	DPjobnbr=DPjobnbr+1
	es=0
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN CATCH,/CANCEL & es=0 & GOTO,LABEL_TRUE_COLOR & ENDIF & ENDIF		

	hedc_win	
	hessi_ct
	TVLCT,r,g,b,/GET
	
	imo->set,image_alg='clean',pixel_size=1.,image_dim=128,det_index_mask=[0,0,1,1,1,1,1,1,0],energy_band=[6,12]
	imo->set_no_screen_output
	PRINT,'.........................TRUE COLOR IMAGE: '+anytim(peaktim,/ECS)+'    eband: 6-12 keV.'
	Rimg=BYTSCL(CONGRID(imo->getdata(),512,512),MIN=0.)
	imo->set,energy_band=[30,50]
	PRINT,'.........................TRUE COLOR IMAGE: '+anytim(peaktim,/ECS)+'    eband: 30-50 keV.'
	Gimg=BYTSCL(CONGRID(imo->getdata(),512,512),MIN=0.)
	imo->set,energy_band=[100,300],REAR=1
	PRINT,'.........................TRUE COLOR IMAGE: '+anytim(peaktim,/ECS)+'    eband: 100-300 keV.'
	Bimg=BYTSCL(CONGRID(imo->getdata(),512,512),MIN=0.)

	S=SIZE(Rimg)
	trueimg=BYTARR(S[1],S[2],3)
	trueimg[*,*,0]=Rimg
	trueimg[*,*,1]=Gimg
	IF TOTAL((imo->get(/binned_N_EVENT))[3:7,0]) GE 24000 THEN trueimg[*,*,2]=Bimg ELSE trueimg[*,*,2]=0
			
	rootfilename=newdatadir+'HEDC_DP_im10_'+eventcode
	write_jpeg,rootfilename+'.jpg',trueimg,TRUE=3
	info=imo->get()
	info.ENERGY_BAND=[6,300]
	IF FILE_EXIST(rootfilename+'.jpg') THEN hedc_write_info_file,'tc1',ev_struct,info,rootfilename+'.info'
	DPjobdone=DPjobdone+1
	
	LABEL_TRUE_COLOR:
	imo->set,REAR=0
ENDIF
;===============================================================================================================================================
;ROI CUMULATIVE IMAGES: 
IF ((ROI_CUM NE 0) AND (DO_IMG NE 0)) THEN BEGIN
	hessi_ct
	TVLCT,r,g,b,/GET
	hedc_win
	;==============================================================
	MINNBRCOUNTS=20000L		;this is PER COLLIMATOR !!!!

	imgalg='clean'
	pixelsiz=1
	imgdim=128
	detindex=[0,0,1,1,1,1,1,1,0]
	imo->set,pixel_size=pixelsiz,image_dim=imgdim,det_index_mask=detindex,image_alg=imgalg
		
	nbr_img_per_eband=BYTARR(5)
	FOR i2=0,4 DO BEGIN	;i2 corresponds to eband...
		CASE i2 OF
			0:BEGIN
				eband=[3,12]
				;tim=hedc_get_img_intv(flare_time_interval,nbrcounts=MINNBRCOUNTS, eband=[0,1], maxaccumtime=16*spin_period,maxintv=5,backgnd_intv=backgndtime,spin_period=spin_period,mindeltat=3*spin_period)
				;tim=hedc_get_img_intv(flare_time_interval,nbrcounts=20000L, eband=[0,1], maxaccumtime=16*spin_period,maxintv=5,minaccumtime=3*spin_period,peaktim=peaktim)
				tim=hedc_get_img_intv(flare_time_interval,nbrcounts=20000L, eband=[0,1], maxaccumtime=16*spin_period,maxintv=5,minaccumtime=3*spin_period)
				mvletter='A'
			END			
			1:BEGIN
				eband=[12,25]
				;tim=hedc_get_img_intv(flare_time_interval,nbrcounts=MINNBRCOUNTS, eband=2, maxaccumtime=16*spin_period,maxintv=5,backgnd_intv=backgndtime,spin_period=spin_period,mindeltat=3*spin_period)
				tim=hedc_get_img_intv(flare_time_interval,nbrcounts=20000L, eband=2, maxaccumtime=16*spin_period,maxintv=5,minaccumtime=3*spin_period)
				mvletter='B'									
			END			
			2:BEGIN
				eband=[25,50]
				;tim=hedc_get_img_intv(flare_time_interval,nbrcounts=MINNBRCOUNTS, eband=3, maxaccumtime=24*spin_period,maxintv=5,backgnd_intv=backgndtime,spin_period=spin_period,mindeltat=3*spin_period)
				tim=hedc_get_img_intv(flare_time_interval,nbrcounts=20000L, eband=3, maxaccumtime=24*spin_period,maxintv=5,minaccumtime=6*spin_period)
				mvletter='C'									
			END			
			3:BEGIN
				eband=[50,100]
				;tim=hedc_get_img_intv(flare_time_interval,nbrcounts=MINNBRCOUNTS, eband=4, maxaccumtime=24*spin_period,maxintv=4,backgnd_intv=backgndtime,spin_period=spin_period,mindeltat=3*spin_period)
				tim=hedc_get_img_intv(flare_time_interval,nbrcounts=20000L, eband=4, maxaccumtime=32*spin_period,maxintv=5,minaccumtime=8*spin_period)
				mvletter='D'									
			END			
			4:BEGIN
				eband=[100,300]
				;tim=hedc_get_img_intv(flare_time_interval,nbrcounts=MINNBRCOUNTS, eband=5, maxaccumtime=32*spin_period,maxintv=5,backgnd_intv=backgndtime,spin_period=spin_period,mindeltat=3*spin_period)
				tim=hedc_get_img_intv(flare_time_interval,nbrcounts=20000L, eband=5, maxaccumtime=32*spin_period,maxintv=3,minaccumtime=8*spin_period)
				mvletter='E'
				imo->set,REAR=1
			END			
			ELSE: PRINT,'Nope'
		ENDCASE
		
		FOR i1=0,N_ELEMENTS(tim[0,*])-1 DO BEGIN
			DPjobnbr=DPjobnbr+1
			es=0
			IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & GOTO,LABEL17 & ENDIF & ENDIF		
			imo->set,image_alg=imgalg,energy_band=eband,time_range=anytim(tim[*,i1])
			imo->set_no_screen_output
			tmp=imo->getdata()
			IF tmp[0,0] EQ -1 THEN BEGIN
				PRINT,'Apparently, this picture failed. Going on with next one...'
				GOTO,LABEL17 
			ENDIF
			PRINT,'.........................ROI image: '+anytim(tim(i1),/ECS)+' ALG: '+imgalg+' '+strn(eband(0))+'-'+strn(eband(1))+' keV.'
			IF CBAR EQ 1 THEN imo->plot,grid=10,charsize=charsize,/CBAR  ELSE imo->plot,margin=0.07,grid=10,charsize=charsize
			rootfilename=newdatadir+'HEDC_DP_mov'+mvletter+'_frame'+int2str(i1,4)+'_'+eventcode
			CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
			info=imo->get()
			IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'im',ev_struct,info,rootfilename+'.info',framenbr=i1,moviename=eventtype+STRMID(eventcode,3)+mvletter
			imo->fitswrite,fitsfile=rootfilename+'.fits',/CREATE
			DPjobdone=DPjobdone+1
		;POINTERS............................................	
			tmpImgInfoPTR=[PTR_NEW(imo->getdata()),PTR_NEW(imo->get())]
			IF NOT EXIST(ImgInfoPTR) THEN ImgInfoPtr=tmpImgInfoPTR ELSE ImgInfoPtr=[[ImgInfoPtr],[tmpImgInfoPTR]]
			nbr_img_per_eband[i2]=nbr_img_per_eband[i2]+1
		;....................................................
			LABEL17:
			IF NOT KEYWORD_SET(BREAKONDPERROR) THEN CATCH,/CANCEL
		ENDFOR ;i1
	ENDFOR ;i2
PRINT,' nbr_img_per_eband: '+strn(nbr_img_per_eband)
	imo->set,REAR=0
	hedc_5x5_panel,ImgInfoPtr,nbr_img_per_eband,[[3,12],[12,25],[25,50],[50,100],[100,300]]
	rootfilename=newdatadir+'HEDC_DP_pte5_'+eventcode
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	info=imo->get()
		info.ABSOLUTE_TIME_RANGE=[taxis[ss_beg],taxis[ss_end]]
		info.ENERGY_BAND=[3,300]
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'pte',ev_struct,info,rootfilename+'.info'
	PTR_FREE,ImgInfoPtr
ENDIF	

;===============================================================================================================================================
IF datatype(imo) EQ 'OBJ' THEN OBJ_DESTROY,imo
HEAP_GC
;===============================================================================================================================================
;MOREIMG: simply do 1 minute image during whole flare duration, in different energy bands.
IF ((MOREIMG NE 0) AND (DO_IMG NE 0)) THEN BEGIN
	es=0
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN CATCH,/CANCEL & es=0 & GOTO,LABEL_MOREIMG & ENDIF & ENDIF		

	hedc_win	
	hessi_ct
	TVLCT,r,g,b,/GET
	pref_dt=60.
	
	imo=hsi_image()
	IF KEYWORD_SET(DEBUG) THEN imo->set,image_alg='back' ELSE imo->set,image_alg='clean'
	imo->set,pixel_size=1,image_dim=128,xyoffset=[xoffset,yoffset]
	imo->set,det_index_mask=[0,0,1,1,1,1,1,1,0]
	imo->set_no_screen_output

	img_intvs=-1
	good_img_intvs=to_nice_img_intervals(flare_time_interval,mindeltat=30.,/ATTLOW,/PARTICLES,wait_after_shutter=60.,wait_after_eclipse=120.)
	good_img_intvs=anytim(good_img_intvs)
	FOR i=0,N_ELEMENTS(good_img_intvs[0,*])-1 DO BEGIN
		duration=good_img_intvs[1,i]-good_img_intvs[0,i]
		n=duration/pref_dt	;n is a double
		WHILE n GE 1. DO BEGIN
			IF N_ELEMENTS(img_intvs) EQ 1 THEN img_intvs=good_img_intvs[1,i]-[n,n-1]*pref_dt ELSE img_intvs=[[img_intvs],[good_img_intvs[1,i]-[n,n-1]*pref_dt]]			
			n=n-1.
		ENDWHILE
		IF n GE 0.5 THEN IF N_ELEMENTS(img_intvs) EQ 1 THEN img_intvs=good_img_intvs[1,i]-[n,0]*pref_dt ELSE img_intvs=[[img_intvs],[good_img_intvs[1,i]-[n,0]*pref_dt]]			
	ENDFOR
	IF N_ELEMENTS(img_intvs) EQ 1 THEN img_intvs=good_img_intvs
	
	n_intvs=N_ELEMENTS(img_intvs[0,*])
	IF n_intvs LT 2 THEN BEGIN
		PRINT,'.........less then 2 good img intervals of appropriate length !!!! -- aborting MOREIMG...'
		GOTO,LABEL_MOREIMG
	ENDIF
	n_ebands=6
	imgs=FLTARR(128,128,n_intvs,n_ebands)
	FOR i=0,n_intvs-1 DO BEGIN
		imo->set,time_range=img_intvs[*,i]
		PRINT,'*** MOREIMG:'+anytim(img_intvs[0,i],/ECS)+' to '+anytim(img_intvs[1,i],/ECS)
		FOR j=0,n_ebands-1 DO BEGIN
			DPjobnbr=DPjobnbr+1
			CASE j OF
				0: BEGIN
					eband=[3,6]
					mvletter='F'
				END
				1: BEGIN
					eband=[6,12]
					mvletter='G'
				END					
				2: BEGIN
					eband=[12,25]
					mvletter='H'
				END
				3: BEGIN
					eband=[25,50]
					mvletter='I'
				END
				4: BEGIN
					eband=[50,100]
					mvletter='J'
				END
				ELSE: BEGIN
					eband=[100,300]				
					mvletter='K'
				END
			ENDCASE
			imo->set,energy_band=eband
			PRINT,'Eband: '+strn(eband[0])+' to '+strn(eband[1])+' keV.'
			
			img=imo->getdata()
			IF N_ELEMENTS(img) NE 1 THEN BEGIN
				imgs[*,*,i,j]=img
				IF CBAR EQ 1 THEN imo->plot,grid=10,charsize=charsize,/CBAR  ELSE imo->plot,margin=0.07,grid=10,charsize=charsize
				rootfilename=newdatadir+'HEDC_DP_mov'+mvletter+'_frame'+int2str(i,4)+'_'+eventcode
				CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
				info=imo->get()
				IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'im',ev_struct,info,rootfilename+'.info',framenbr=i,moviename=eventtype+STRMID(eventcode,3)+mvletter
				imo->fitswrite,fitsfile=rootfilename+'.fits',/CREATE				
				DPjobdone=DPjobdone+1
			ENDIF				
		ENDFOR
	ENDFOR
	
	;make a panel of all those images...
	DPjobnbr=DPjobnbr+1	
	basesize=150
	xsize=basesize*n_intvs
	ysize=basesize*n_ebands
	hedc_win,xsize,ysize
	!P.MULTI=[0,n_intvs,n_ebands]
	hessi_ct
	FOR j=0,n_ebands-1 DO BEGIN
		FOR i=0,n_intvs-1 DO BEGIN
			plot_image,imgs[*,*,i,j],xtickname=REPLICATE(' ',10),ytickname=REPLICATE(' ',10),/iso,charsize=0.01,/VEL,ticklen=0
		ENDFOR
	ENDFOR

	;POLISH the panel:
	addxsize=20
	addysize=20
	img1=TVRD()
	img2=BYTARR(xsize+addxsize,ysize+addysize)
	img2[addxsize:xsize+addxsize-1,0:ysize-1]=img1
	hedc_win,xsize+addxsize,ysize+addysize
	TV,img2
	XYOUTS,/DEV,15,30+basesize*0,charsize=0.8,ORIENTATION=90,'100-300 keV'
	XYOUTS,/DEV,15,30+basesize*1,charsize=0.8,ORIENTATION=90,'50-100 keV'
	XYOUTS,/DEV,15,30+basesize*2,charsize=0.8,ORIENTATION=90,'25-50 keV'
	XYOUTS,/DEV,15,30+basesize*3,charsize=0.8,ORIENTATION=90,'12-25 keV'
	XYOUTS,/DEV,15,40+basesize*4,charsize=0.8,ORIENTATION=90,'6-12 keV'
	XYOUTS,/DEV,15,40+basesize*5,charsize=0.8,ORIENTATION=90,'3-6 keV'
	FOR i=0,n_intvs-1 DO BEGIN 
		XYOUTS,/DEV,addxsize+i*basesize+10,ysize+addysize-10,anytim(img_intvs[0,i],/ECS,/time_only)+ ' to'
		XYOUTS,/DEV,addxsize+i*basesize+10,ysize+addysize-20,anytim(img_intvs[1,i],/ECS,/time_only)		
	ENDFOR
	rootfilename=newdatadir+'HEDC_DP_pten_'+eventcode
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b

	info=imo->get()
		info.ABSOLUTE_TIME_RANGE=flare_time_interval
		info.ENERGY_BAND=[3,100]
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'ptn',ev_struct,info,rootfilename+'.info'
	imo->fitswrite,fitsfile=rootfilename+'.fits',/CREATE
	DPjobdone=DPjobdone+1

	LABEL_MOREIMG:
	IF exist(imgs) THEN delvarx,imgs
ENDIF
;===============================================================================================================================================
OBJ_DESTROY,imo
delvarx,imo
HEAP_GC
;===============================================================================================================================================
;SPECTRA
IF SPECTRA NE 0 THEN BEGIN 
	hedc_win,768,512
	myct3,ct=1
	TVLCT,r,g,b,/GET
	spo=hsi_spectrum()
	seg_index_mask=[1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1]
	spo->set,obs_time_interval=obs_time_interval,seg_index_mask=seg_index_mask,sp_energy_bin=5,sp_semi_cal=0
	;title='HESSI flux vs. energy, semi-calibrated, WITH background'
	title='HESSI count spectrum, WITH background'
	
;peaktim:
	DPjobnbr=DPjobnbr+1
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL07 & ENDIF & ENDIF	
	peak_sp_intv=rhessi_return_nice_intv(flare_time_interval,peaktim,max=1,spin_period=spin_period)
	spo->set,time_range=anytim(peak_sp_intv)-t0
	PRINT,'.........................SPECTRUM : peaktime'
	spo->plot,charsize=charsize,title=title
	rootfilename=newdatadir+'HEDC_DP_sp01_'+eventcode
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	info=spo->get()
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'sp',ev_struct,info,rootfilename+'.info'
	peak_sp=spo->getdata()
	DPjobdone=DPjobdone+1
	LABEL07:	
IF KEYWORD_SET(MINIMUM) THEN GOTO,LABEL10

;halftim1:
	DPjobnbr=DPjobnbr+1
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL08 & ENDIF & ENDIF
	h1_sp_intv=rhessi_return_nice_intv(flare_time_interval,halftim1,max=1,spin_period=spin_period)
	spo->set,time_range=anytim(h1_sp_intv)-t0
	PRINT,'.........................SPECTRUM : halftim1'
	spo->plot,charsize=charsize,title=title
	rootfilename=newdatadir+'HEDC_DP_sp00_'+eventcode
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD()
	info=spo->get()
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'sp',ev_struct,info,rootfilename+'.info'
	half1_sp=spo->getdata()
	DPjobdone=DPjobdone+1
	LABEL08:
;halftim2:
	DPjobnbr=DPjobnbr+1
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL09 & ENDIF & ENDIF
	h2_sp_intv=rhessi_return_nice_intv(flare_time_interval,halftim2,max=1,spin_period=spin_period)
	spo->set,time_range=anytim(h2_sp_intv)-t0
	PRINT,'.........................SPECTRUM : halftim2'
	spo->plot,charsize=charsize,title=title
	rootfilename=newdatadir+'HEDC_DP_sp02_'+eventcode
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD()
	info=spo->get()
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'sp',ev_struct,info,rootfilename+'.info'
	half2_sp=spo->getdata()
	DPjobdone=DPjobdone+1		
	LABEL09:
;3 spectra together:
	DPjobnbr=DPjobnbr+1
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL10 & ENDIF & ENDIF
	ebins=spo->getdata(/xaxis)
	;plot,ebins,half1_sp.flux,/xlog,/ylog,xtitle='Energy (keV)',ytitle='photons cm!U-2!N s!U-1!N keV!U-1!N',title=title,/nodata
	plot,ebins,half1_sp.flux,/xlog,/ylog,xtitle='Energy (keV)',ytitle='uncalibrated counts',title=title,/nodata
	oplot,ebins,half1_sp.flux,color=249
	oplot,ebins,peak_sp.flux,color=251
	oplot,ebins,half2_sp.flux,color=254

	XYOUTS,/norm,0.8,0.8,' '+anytim(peaktim,/ECS,/date_only)
	XYOUTS,/norm,0.8,0.775,'Segments used:'
	tmp='  '
	FOR i=0,8 DO tmp=tmp+strn(seg_index_mask(i))
	XYOUTS,/norm,0.8,0.75,tmp
	tmp='  '
	FOR i=9,17 DO tmp=tmp+strn(seg_index_mask(i))
	XYOUTS,/norm,0.8,0.725,tmp
	
	XYOUTS,/norm,0.7,0.9,anytim(h1_sp_intv[0],/ECS,/time_only)+' to '+anytim(h1_sp_intv[1],/ECS,/time_only),color=249
	XYOUTS,/norm,0.7,0.875,anytim(peak_sp_intv[0],/ECS,/time_only)+' to '+anytim(peak_sp_intv[1],/ECS,/time_only),color=251
	XYOUTS,/norm,0.7,0.85,anytim(h2_sp_intv[0],/ECS,/time_only)+' to '+anytim(h2_sp_intv[1],/ECS,/time_only),color=254
	rootfilename=newdatadir+'HEDC_DP_sp03_'+eventcode
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	info=spo->get()
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'sp',ev_struct,info,rootfilename+'.info'
	DPjobdone=DPjobdone+1		

	LABEL10:	
OBJ_DESTROY,spo
ENDIF
;======================================================================================================================================================
;ASPECT SOLUTION
IF ASPECT NE 0 THEN BEGIN
	DPjobnbr=DPjobnbr+1		
olddevice=!D.NAME
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL14 & ENDIF & ENDIF
set_plot,'X'
	hedc_win,768,512
	ao=hsi_aspect_solution() 
	ao->set,aspect_cntl_level=6 	
	ao->set,obs_time_interval=anytim(obs_time_interval)
	PRINT,'.........................ASPECT'
	!P.MULTI=0	;;;;This should later be removed...
	as=ao->getdata()
	
	rootfilename=newdatadir+'HEDC_DP_os07_'+eventcode
	TVLCT,r,g,b,/GET
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'os7',ev_struct,obs_time_interval,rootfilename+'.info'
	DPjobdone=DPjobdone+1		
	LABEL14:
set_plot,olddevice		
	obj_destroy,ao
ENDIF
;===============================================================================================================================================
;Spectral index
IF SP_INDEX NE 0 THEN BEGIN
	DPjobnbr=DPjobnbr+1		
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL22 & ENDIF & ENDIF
	rootfilename=newdatadir+'HEDC_DP_os08_'+eventcode
	PRINT,'.........................SPECTRAL INDEX'
	hedc_spectral_index,flare_time_interval,backtime=backgndtime,spin_period=spin_period
	TVLCT,r,g,b,/GET
	CALL_PROCEDURE,'write_'+pictype,rootfilename+'.'+pictype,TVRD(),r,g,b	
	IF FILE_EXIST(rootfilename+'.'+pictype) THEN hedc_write_info_file,'os8',ev_struct,obs_time_interval,rootfilename+'.info'
	DPjobdone=DPjobdone+1
	LABEL22:
	hessi_ct
ENDIF
;===============================================================================================================================================
IF KEYWORD_SET(ZBUFFER) THEN BEGIN
        DEVICE,/CLOSE
        SET_PLOT,old_device
ENDIF
;===============================================================================================================================================
IF KEYWORD_SET(REMOVE_FROM_HEDC) THEN BEGIN
	IF NOT KEYWORD_SET(BREAKONDPERROR) THEN BEGIN CATCH,es & IF es NE 0 THEN BEGIN es=0 & CATCH,/CANCEL & GOTO,LABEL_REPLACE & ENDIF & ENDIF
	CD, GETENV('HEC_ROOT')+'/util', CURRENT=old_dir
	PRINT,'...........Spawning hedc_hsi_delete_HLEcode '+eventcode+' ...............'
	SPAWN,'hedc_hsi_delete_HLEcode '+eventcode
	LABEL_REPLACE:
	CD,old_dir
ENDIF
;===============================================================================================================================================
	totdur=systime(/SEC)-startsystime	
	PRINT,'.............................. hedc_solar_event.pro completed!!!!!!!!!'
	PRINT,'........ DPs successfully completed: '+STRN(DPjobdone)+' out of '+STRN(DPjobnbr)+' ('+STRN(100*FLOAT(DPjobdone)/DPjobnbr)+'%)'
	PRINT,'.................... in '+STRN(totdur)+' seconds..............................................'
END	; at last !!!
;===============================================================================================================================================
;===============================================================================================================================================
;===============================================================================================================================================
;===============================================================================================================================================
;===============================================================================================================================================
;===============================================================================================================================================



