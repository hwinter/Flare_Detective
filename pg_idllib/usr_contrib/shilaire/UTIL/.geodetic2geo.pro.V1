;+
; NAME:
;       GEODETIC2GEO
;
; PURPOSE:
;	Converts from geodetic (latitude, longitude, altitude) to geographic
;	(latitude, longitude, altitude). The geodetic (or ellipsoidal) coordinate 
;	system takes into account the Earth's oblateness. In geographic coordinates,
;	the Earth is assumed a perfect sphere with a radius equal to its equatorial 
;	radius.
;
;	Latitudes and longitudes are expressed in degrees, altitudes in km.
;
;	REF: Stephen P.  Keeler and Yves Nievergelt, "Computing geodetic coordinates", SIAM Rev. Vol. 40, No. 2, pp. 300-309, June 1998
;	
;
; CALLING SEQUENCE:
;       gcoord=geodetic2geo(ecoord)
;
; INPUT:
;	ecoord = a 3-element array of geodetic [latitude,longitude,altitude], or an array [3,n] of n such coordinates.
;
; KEYWORD INPUTS:
;	None
;
; OUTPUT:
;	a 3-element array of geographic [latitude,longitude,altitude], or an array [3,n] of n such coordinates	
;
; COMMON BLOCKS:
;	None
;
; RESTRICTIONS:
;       None
;
; EXAMPLES:
;
;	IDL> geod=[90,0,0]	; North pole, altitude 0., in geodetic coordinates
;	IDL> geo=geodetic2geo(geod)
;	IDL> PRINT,geo
;       90.000000       0.0000000      -21.384586
;
; MODIFICATION HISTORY:
;	Written by Pascal Saint-Hilaire (shilaire@astro.phys.ethz.ch) on 2002/04/24
;		
;-

;===================================================================================
FUNCTION geodetic2geo_singlepoint,ecoord
	Re=6378.137D	; equatorial radius
	Rp=6356.752D	; polar radius
	e=0.081819D	; eccentricity	= sqrt(Re^2-Rp^2)/Re
	;f=1/298.257D	; flattening = (Re-Rp)/Re
		
	elat=DOUBLE(ecoord(0))*!PI/180.	
	elon=DOUBLE(ecoord(1))
	ealt=DOUBLE(ecoord(2))
	
	beta=sqrt(1-(e*sin(elat))^2)
	r=(Re/beta + ealt)*cos(elat)
	z=(Re*(1-e^2)/beta + ealt)*sin(elat)
	
	glat=atan(z,r)*180./!PI
	glon=elon
	galt=sqrt(r^2+z^2) - Re
	
	RETURN,[glat,glon,galt]
END
;===================================================================================
;===================================================================================
FUNCTION geodetic2geo,ecoord
	S=Size(ecoord)
	IF S[1] NE 3 THEN RETURN,-1
	
	IF S[0] EQ 1 THEN gcoord=geodetic2geo_singlepoint(ecoord) ELSE BEGIN
		gcoord=DBLARR(3,S[2])	
		FOR i=0L,S[2]-1 DO gcoord(*,i)=geodetic2geo_singlepoint(ecoord(*,i))
	ENDELSE

	RETURN,gcoord
END
;===================================================================================

