;+
; NAME:
;
; pg_mapcfit
;
; PURPOSE:
;
; returns the "centroid" of the input map by different methods. Accept
; as input a region of interest of the map given by its 2 corner coords
;
; CATEGORY:
;
; image fitting utility
;
; CALLING SEQUENCE:
;
; pg_mapcfit,map,x,y,roi=roi,method=method,/pixel,/data
;
; INPUTS:
;
; map: an image map a la Zarro
; roi: region of interest, an array [x1,x2,y1,y2] od the corners of
;      the ROI.
; method: a string with the method name, chosen between
;
;             'MAX': return the position of the brightest pixel 
;             'CENTROID': returns the center of mass
;             'GAUSSFIT': uses mp2dpeakfit
;             'QUADRIC' : max of the elliptic paraboloid defined by
;                         the brightest pixel + its 4 nearest neighbours
;
; OPTIONAL INPUTS:
;
; 
; KEYWORD PARAMETERS:
;
; pixel: if set, the *roi* is given in pixel coordinates (default)
; data : if set, the *roi* is given in data  coordinates
;
; OUTPUTS:
;
; x,y: position of the "centroid" or "peak" of the image
; peakvalue: value by the peak
;
; OPTIONAL OUTPUTS:
;
;
;
; COMMON BLOCKS:
;
;
;
; SIDE EFFECTS:
;
;
;
; RESTRICTIONS:
;
;
;
; PROCEDURE:
;
;
;
; EXAMPLE:
;
;
;
; AUTHOR:
;
; Paolo Grigis, Institute of Astronomy, ETH Zurich
; pgrigis@astro.phys.ethz.ch
;
; MODIFICATION HISTORY:
;
; 13-OCT-2004 written
; 12-JAN-2004 added fitout keyword
;-

PRO pg_mapcfit,map,x,y,roi=roi,method=method,peakvalue=peakvalue $
              ,rpixel=rpixel,rdata=rdata,avmethods=avmethods $
              ,getmethods=getmethods,quiet=quiet,xerr=xerr,yerr=yerr $
              ,peakerr=peakerr,geterror=geterror,fitout=fitout

IF keyword_set(getmethods) THEN BEGIN
   pg_arrcfit,map,x,y,/getmethods,avmethods=avmethods
   RETURN
ENDIF


;if pointer then...
IF size(map,/type) EQ 10 THEN BEGIN
   np=n_elements(map)
   x=fltarr(np)
   y=fltarr(np)
   xerr=x
   yerr=y
   fitout=ptrarr(np)
   peakvalue=fltarr(np)
   FOR i=0L,np-1 DO BEGIN
      print,i
      pg_mapcfit,*map[i],xx,yy,xerr=xxerr,yerr=yyerr,roi=roi,method=method $
                ,peakvalue=pp,rpixel=rpixel,rdata=rdata,geterror=geterror $
                ,fitout=ffitout
      x[i]=xx
      y[i]=yy
      xerr[i]=xxerr
      yerr[i]=yyerr
      peakvalue[i]=pp
      fitout[i]=ffitout
   ENDFOR

   RETURN

ENDIF


IF keyword_set(rpixel) AND keyword_set(rdata) THEN BEGIN
   print,'Please select either /rpixel or /rdata'
   RETURN
ENDIF

IF keyword_set(rdata) THEN conpix=1B ELSE conpix=0B

data=map.data
s=size(data)

IF s[0] NE 2 THEN BEGIN
   print,'Invalid map!'
   RETURN
ENDIF

IF NOT exist(ROI) THEN BEGIN
   roi=[0,0,s[1]-1,s[2]-1]
ENDIF


IF conpix EQ 1B THEN BEGIN
   outcoor1=map_coor2pix(roi[[0,2]],map,/round)
   outcoor2=map_coor2pix(roi[[1,3]],map,/round)
   proi=[outcoor1[0],outcoor2[0],outcoor1[1],outcoor2[1]]
ENDIF $
ELSE proi=roi

;order the roi
IF proi[1] LT proi[0] THEN BEGIN
   tmp=proi[0]
   proi[0]=proi[1]
   proi[1]=tmp
ENDIF
IF proi[3] LT proi[2] THEN BEGIN
   tmp=proi[2]
   proi[2]=proi[3]
   proi[3]=tmp
ENDIF
;


x1=proi[0] >0 <(s[1]-1)
x2=proi[1] >0 <(s[1]-1)
y1=proi[2] >0 <(s[2]-1)
y2=proi[3] >0 <(s[2]-1)

arr=map.data[x1:x2,y1:y2]

IF have_tag(map,'PG_IM_ERROR') THEN BEGIN 
   pg_arrcfit,arr,x,y,arr_err=map.pg_im_error,method=method $
             ,peakvalue=peakvalue,xerr=xerr,yerr=yerr,peakerr=peakerr $
             ,fitout=fitout
ENDIF $
ELSE BEGIN
   pg_arrcfit,arr,x,y,method=method,peakvalue=peakvalue,xerr=xerr,yerr=yerr $
             ,peakerr=peakerr,fitout=fitout
ENDELSE


;convert pixel to data coord

;stop

;print,x1,y1,x,y

outcoor=map_pix2coor([x+x1,y+y1],map)


;convert fitout

IF exist(fitout) THEN BEGIN 

   a=fitout

   ;convert a2,a3
   a1max=a[4]+a[2]
   a2max=a[5]+a[3]
   outcoor=map_pix2coor([a[4]+x1,a[5]+y1],map)
   outcoor2=map_pix2coor([a1max+x1,a2max+y1],map)

   a[4]=outcoor[0]
   a[5]=outcoor[1]
   a[2]=abs(outcoor2[0]-a[4])
   a[3]=abs(outcoor2[1]-a[5])
   
   fitout=a
ENDIF


IF keyword_set(geterror) THEN BEGIN
 ;  stop
   xmax=x+xerr
   ymax=y+yerr
   outcoor2=map_pix2coor([xmax+x1,ymax+y1],map)
   x=outcoor[0]
   y=outcoor[1]
   xerr=abs(outcoor2[0]-x)
   yerr=abs(outcoor2[1]-y)
ENDIF ELSE BEGIN 
   x=outcoor[0]
   y=outcoor[1]
ENDELSE


IF NOT keyword_set(quiet) THEN $
  print,x,y

RETURN

END

 

